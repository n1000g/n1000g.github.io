<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>如何对接口鉴权这样一个功能开发做面向对象分析</title>
    <link href="/2022/02/18/%E5%A6%82%E4%BD%95%E5%AF%B9%E6%8E%A5%E5%8F%A3%E9%89%B4%E6%9D%83%E8%BF%99%E6%A0%B7%E4%B8%80%E4%B8%AA%E5%8A%9F%E8%83%BD%E5%BC%80%E5%8F%91%E5%81%9A%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%88%86%E6%9E%90/"/>
    <url>/2022/02/18/%E5%A6%82%E4%BD%95%E5%AF%B9%E6%8E%A5%E5%8F%A3%E9%89%B4%E6%9D%83%E8%BF%99%E6%A0%B7%E4%B8%80%E4%B8%AA%E5%8A%9F%E8%83%BD%E5%BC%80%E5%8F%91%E5%81%9A%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>整合自极客时间王争《设计模式之美》课程关于开闭原则的解释案例</p><p>软件实体应该对扩展开放、对修改关闭，详细表述就是添加一个新功能应该是，在已有代码的基础上扩展代码，而非修改已有代码。</p><h2 id="初步设计"><a class="markdownIt-Anchor" href="#初步设计"></a> 初步设计</h2><ul><li>AlertRule 存储告警规则，可自由设置</li><li>Notification 是告警通知类，支持邮件、短信等多种渠道，核心方法是 notify() 方法<ul><li>NotificationEmergencyLevel 枚举类表示警告级别</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Alert</span> </span>&#123;<br>  <span class="hljs-keyword">private</span> AlertRule rule;<br>  <span class="hljs-keyword">private</span> Notification notification;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Alert</span><span class="hljs-params">(AlertRule rule, Notification notification)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.rule = rule;<br>    <span class="hljs-keyword">this</span>.notification = notification;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">check</span><span class="hljs-params">(String api, <span class="hljs-keyword">long</span> requestCount, <span class="hljs-keyword">long</span> errorCount, <span class="hljs-keyword">long</span> durationOfSeconds)</span> </span>&#123;<br>    <span class="hljs-keyword">long</span> tps = requestCount / durationOfSeconds;<br>    <span class="hljs-keyword">if</span> (tps &gt; rule.getMatchedRule(api).getMaxTps()) &#123;<br>      notification.notify(NotificationEmergencyLevel.URGENCY, <span class="hljs-string">&quot;...&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (errorCount &gt; rule.getMatchedRule(api).getMaxErrorCount()) &#123;<br>      notification.notify(NotificationEmergencyLevel.SEVERE, <span class="hljs-string">&quot;...&quot;</span>);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码主要业务逻辑在 <code>check()</code> 函数，当接口 TPS 超过某个阈值时，以及接口请求出错数大于某个允许的最大值时，就会触发告警。</p><h2 id="添加新功能"><a class="markdownIt-Anchor" href="#添加新功能"></a> 添加新功能</h2><p>上述代码的扩展性显然很差。如果现在有一个新功能需求。当每秒钟接口超时请求个数超过某个预先设置的最大阈值时，我们也要触发告警发送通知。这时候主要的改动有两处</p><ul><li>第一处是修改 <code>check()</code> 函数的入参，添加一个新的统计数据表示超时接口请求数</li><li>第二处是在 <code>check()</code> 函数中添加新的告警逻辑</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Alert</span> </span>&#123;<br>  <span class="hljs-comment">// ...省略AlertRule/Notification属性和构造函数...</span><br>  <br>  <span class="hljs-comment">// 改动一：添加参数timeoutCount</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">check</span><span class="hljs-params">(String api, <span class="hljs-keyword">long</span> requestCount, <span class="hljs-keyword">long</span> errorCount, <span class="hljs-keyword">long</span> timeoutCount, <span class="hljs-keyword">long</span> durationOfSeconds)</span> </span>&#123;<br>    <span class="hljs-keyword">long</span> tps = requestCount / durationOfSeconds;<br>    <span class="hljs-keyword">if</span> (tps &gt; rule.getMatchedRule(api).getMaxTps()) &#123;<br>      notification.notify(NotificationEmergencyLevel.URGENCY, <span class="hljs-string">&quot;...&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (errorCount &gt; rule.getMatchedRule(api).getMaxErrorCount()) &#123;<br>      notification.notify(NotificationEmergencyLevel.SEVERE, <span class="hljs-string">&quot;...&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 改动二：添加接口超时处理逻辑</span><br>    <span class="hljs-keyword">long</span> timeoutTps = timeoutCount / durationOfSeconds;<br>    <span class="hljs-keyword">if</span> (timeoutTps &gt; rule.getMatchedRule(api).getMaxTimeoutTps()) &#123;<br>      notification.notify(NotificationEmergencyLevel.URGENCY, <span class="hljs-string">&quot;...&quot;</span>);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样的代码修改实际上存在挺多问题的。一方面，我们对接口进行了修改，这就意味着调用这接口的代码都要做相应的修改方面，修改了 <code>check()</code> 函数，相应的单元测试都需要修改</p><p>上面的改动都是基于“修改”的方式实现的，如果要遵循开闭原则，如何通过“扩展”方式来实现？</p><h2 id="重构"><a class="markdownIt-Anchor" href="#重构"></a> 重构</h2><p>重构的内容主要包含两部分</p><ul><li>第一部分是将 <code>check()</code> 函数的多个入参封装成 ApiStatInfo 类</li><li>第二部分是引入 handler 概念，将 if 判断逻辑分散在各个 handler 中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Alert</span> </span>&#123;<br>  <span class="hljs-keyword">private</span> List&lt;AlertHandler&gt; alertHandlers = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>  <br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addAlertHandler</span><span class="hljs-params">(AlertHandler alertHandler)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.alertHandlers.add(alertHandler);<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">check</span><span class="hljs-params">(ApiStatInfo apiStatInfo)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (AlertHandler handler : alertHandlers) &#123;<br>      handler.check(apiStatInfo);<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ApiStatInfo</span> </span>&#123;<span class="hljs-comment">//省略constructor/getter/setter方法</span><br>  <span class="hljs-keyword">private</span> String api;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> requestCount;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> errorCount;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> durationOfSeconds;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AlertHandler</span> </span>&#123;<br>  <span class="hljs-keyword">protected</span> AlertRule rule;<br>  <span class="hljs-keyword">protected</span> Notification notification;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">AlertHandler</span><span class="hljs-params">(AlertRule rule, Notification notification)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.rule = rule;<br>    <span class="hljs-keyword">this</span>.notification = notification;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">check</span><span class="hljs-params">(ApiStatInfo apiStatInfo)</span></span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TpsAlertHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AlertHandler</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TpsAlertHandler</span><span class="hljs-params">(AlertRule rule, Notification notification)</span> </span>&#123;<br>    <span class="hljs-keyword">super</span>(rule, notification);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">check</span><span class="hljs-params">(ApiStatInfo apiStatInfo)</span> </span>&#123;<br>    <span class="hljs-keyword">long</span> tps = apiStatInfo.getRequestCount()/ apiStatInfo.getDurationOfSeconds();<br>    <span class="hljs-keyword">if</span> (tps &gt; rule.getMatchedRule(apiStatInfo.getApi()).getMaxTps()) &#123;<br>      notification.notify(NotificationEmergencyLevel.URGENCY, <span class="hljs-string">&quot;...&quot;</span>);<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ErrorAlertHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AlertHandler</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ErrorAlertHandler</span><span class="hljs-params">(AlertRule rule, Notification notification)</span></span>&#123;<br>    <span class="hljs-keyword">super</span>(rule, notification);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">check</span><span class="hljs-params">(ApiStatInfo apiStatInfo)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (apiStatInfo.getErrorCount() &gt; rule.getMatchedRule(apiStatInfo.getApi()).getMaxErrorCount()) &#123;<br>      notification.notify(NotificationEmergencyLevel.SEVERE, <span class="hljs-string">&quot;...&quot;</span>);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="使用"><a class="markdownIt-Anchor" href="#使用"></a> 使用</h2><p>重构后的 Alter 的使用如下：</p><p>其中，ApplicationContext 是一个单例类，负责 Alter 的创建、组装（rule 和 notification 的依赖注入）、初始化（添加 handlers）工作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ApplicationContext</span> </span>&#123;<br>  <span class="hljs-keyword">private</span> AlertRule alertRule;<br>  <span class="hljs-keyword">private</span> Notification notification;<br>  <span class="hljs-keyword">private</span> Alert alert;<br>  <br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initializeBeans</span><span class="hljs-params">()</span> </span>&#123;<br>    alertRule = <span class="hljs-keyword">new</span> AlertRule(<span class="hljs-comment">/*.省略参数.*/</span>); <span class="hljs-comment">//省略一些初始化代码</span><br>    notification = <span class="hljs-keyword">new</span> Notification(<span class="hljs-comment">/*.省略参数.*/</span>); <span class="hljs-comment">//省略一些初始化代码</span><br>    alert = <span class="hljs-keyword">new</span> Alert();<br>    alert.addAlertHandler(<span class="hljs-keyword">new</span> TpsAlertHandler(alertRule, notification));<br>    alert.addAlertHandler(<span class="hljs-keyword">new</span> ErrorAlertHandler(alertRule, notification));<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Alert <span class="hljs-title">getAlert</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> alert; &#125;<br><br>  <span class="hljs-comment">// 饿汉式单例</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ApplicationContext instance = <span class="hljs-keyword">new</span> ApplicationContext();<br>  <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">ApplicationContext</span><span class="hljs-params">()</span> </span>&#123;<br>    initializeBeans();<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ApplicationContext <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> instance;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    ApiStatInfo apiStatInfo = <span class="hljs-keyword">new</span> ApiStatInfo();<br>    <span class="hljs-comment">// ...省略设置apiStatInfo数据值的代码</span><br>    ApplicationContext.getInstance().getAlert().check(apiStatInfo);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="重构后的新功能扩展"><a class="markdownIt-Anchor" href="#重构后的新功能扩展"></a> 重构后的新功能扩展</h2><p>现在，我们再来看下基于重构之后的代码，如果再添加上面讲到的那个新功能（每秒钟接超时请求个数超过某个最大阈值就告警）我们又该如何改动代码，主要的改动有下面四处</p><ul><li>第一处改动是在 ApiStatInfo 类中添加新的属性 timeoutCount</li><li>第二处改动是添加新的 TimeoutAlertHander 类</li><li>第三处改动是在 ApplicationContext 类的 <code>initializeBeans()</code> 方法中往 alter 对象里注册新的 handler</li><li>第四处改动是在使用 Alert 类的时候，需要给 <code>check()</code> 函数的入参 apiStatlnfo 对象设置 timeoutCount 的值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Alert</span> </span>&#123; <span class="hljs-comment">// 代码未改动... &#125;</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ApiStatInfo</span> </span>&#123;<span class="hljs-comment">//省略constructor/getter/setter方法</span><br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> timeoutCount; <span class="hljs-comment">// 改动一：添加新字段</span><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AlertHandler</span> </span>&#123; <span class="hljs-comment">//代码未改动... &#125;</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TpsAlertHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AlertHandler</span> </span>&#123;<span class="hljs-comment">//代码未改动...&#125;</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ErrorAlertHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AlertHandler</span> </span>&#123;<span class="hljs-comment">//代码未改动...&#125;</span><br><span class="hljs-comment">// 改动二：添加新的handler</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TimeoutAlertHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AlertHandler</span> </span>&#123;<span class="hljs-comment">//省略代码...&#125;</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ApplicationContext</span> </span>&#123;<br>  <span class="hljs-keyword">private</span> AlertRule alertRule;<br>  <span class="hljs-keyword">private</span> Notification notification;<br>  <span class="hljs-keyword">private</span> Alert alert;<br>  <br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initializeBeans</span><span class="hljs-params">()</span> </span>&#123;<br>    alertRule = <span class="hljs-keyword">new</span> AlertRule(<span class="hljs-comment">/*.省略参数.*/</span>); <span class="hljs-comment">//省略一些初始化代码</span><br>    notification = <span class="hljs-keyword">new</span> Notification(<span class="hljs-comment">/*.省略参数.*/</span>); <span class="hljs-comment">//省略一些初始化代码</span><br>    alert = <span class="hljs-keyword">new</span> Alert();<br>    alert.addAlertHandler(<span class="hljs-keyword">new</span> TpsAlertHandler(alertRule, notification));<br>    alert.addAlertHandler(<span class="hljs-keyword">new</span> ErrorAlertHandler(alertRule, notification));<br>    <span class="hljs-comment">// 改动三：注册handler</span><br>    alert.addAlertHandler(<span class="hljs-keyword">new</span> TimeoutAlertHandler(alertRule, notification));<br>  &#125;<br>  <span class="hljs-comment">//...省略其他未改动代码...</span><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    ApiStatInfo apiStatInfo = <span class="hljs-keyword">new</span> ApiStatInfo();<br>    <span class="hljs-comment">// ...省略apiStatInfo的set字段代码</span><br>    apiStatInfo.setTimeoutCount(<span class="hljs-number">289</span>); <span class="hljs-comment">// 改动四：设置tiemoutCount值</span><br>    ApplicationContext.getInstance().getAlert().check(apiStatInfo);<br>&#125;<br></code></pre></td></tr></table></figure><p>重构之后的代码更加灵活和易扩展。如果我们要想添加新的告警逻辑，只需要基于扩展的方式创建新的 handler 类即可，不需要改动原来的 <code>check()</code> 函数的逻辑。而且，我们只需要为新的 handler 类添加单元测试，老的单元测试都不会失败，也不用修改。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>“API 接口监控告警”的优秀代码实践</title>
    <link href="/2022/02/18/%E2%80%9CAPI%20%E6%8E%A5%E5%8F%A3%E7%9B%91%E6%8E%A7%E5%91%8A%E8%AD%A6%E2%80%9D%E7%9A%84%E4%BC%98%E7%A7%80%E4%BB%A3%E7%A0%81%E5%AE%9E%E8%B7%B5/"/>
    <url>/2022/02/18/%E2%80%9CAPI%20%E6%8E%A5%E5%8F%A3%E7%9B%91%E6%8E%A7%E5%91%8A%E8%AD%A6%E2%80%9D%E7%9A%84%E4%BC%98%E7%A7%80%E4%BB%A3%E7%A0%81%E5%AE%9E%E8%B7%B5/</url>
    
    <content type="html"><![CDATA[<h2 id="需求分析"><a class="markdownIt-Anchor" href="#需求分析"></a> 需求分析</h2><p>面向对象分析（OOA）、面向对象设计（OOD）、面向对象编程（OOP），是面向对象开 发的三个主要环节。在前面的章节中，我对三者的讲解比较偏理论、偏概括性，目的是让你 先有一个宏观的了解，知道什么是 OOA、OOD、OOP。不过，光知道“是什么”是不够的，我们更重要的还是要知道“如何做”，也就是，如何进行面向对象分析、设计与编程。</p><p>在过往的工作中，我发现，很多工程师，特别是初级工程师，本身没有太多的项目经验，或者参与的项目都是基于开发框架填写 CRUD 模板似的代码，导致分析、设计能力比较欠缺。当他们拿到一个比较笼统的开发需求的时候，往往不知道从何入手。</p><p>对于“如何做需求分析，如何做职责划分？需要定义哪些类？每个类应该具有哪些属性、方法？类与类之间该如何交互？如何组装类成一个可执行的程序？”等等诸多问题，都没有清晰的思路，更别提利用成熟的设计原则、思想或者设计模式，开发出具有高内聚低耦合、易 扩展、易读等优秀特性的代码了。</p><h3 id="案例介绍和难点剖析"><a class="markdownIt-Anchor" href="#案例介绍和难点剖析"></a> 案例介绍和难点剖析</h3><p>假设，你正在参与开发一个微服务。微服务通过 HTTP 协议暴露接口给其他系统调用，说直白点就是，其他系统通过 URL 来调用微服务的接口。有一天，你的 leader 找到你说，“为了保证接口调用的安全性，我们希望设计实现一个接口调用鉴权功能，只有经过认 证之后的系统才能调用我们的接口，没有认证过的系统调用我们的接口会被拒绝。我希望由你来负责这个任务的开发，争取尽快上线。”</p><p>leader 丢下这些话就走了。这个时候，你该如何来做呢？有没有脑子里一团浆糊，一时间 无从下手的感觉呢？为什么会有这种感觉呢？我个人觉得主要有下面两点原因。</p><ol><li>需求不明确。leader 给到的需求过于模糊、笼统，不够具体、细化，离落地到设计、编码还有一定的距离。而人的大脑不擅长思考这种过于抽象的问题。</li><li>缺少锻炼。相比单纯的业务 CRUD 开发，鉴权这个开发任务，要更有难度。鉴权作为一个跟具体业务无关的功能，我们完全可以把它开发成一个独立的框架，集成到很多业务系统中。而作为被很多系统复用的通用框架，比起普通的业务代码，我们对框架的代码质量要求要更高。开发这样通用的框架，对工程师的需求分析能力、设计能力、编码能力，甚至逻辑思维能力 的要求，都是比较高的。如果你平时做的都是简单的 CRUD 业务开发，那这方面的锻炼肯 定不会很多。</li></ol><h3 id="对案例进行需求分析"><a class="markdownIt-Anchor" href="#对案例进行需求分析"></a> 对案例进行需求分析</h3><p>实际上，需求分析的工作很琐碎，也没有太多固定的章法可寻，所以，我不打算很牵强地罗列那些听着有用、实际没用的方法论，而是希望通过鉴权这个例子，来给你展示一下，面对需求分析的时候，我的完整的思考路径是什么样的。希望你能自己去体会，举一反三地类比应用到其他项目的需求分析中。</p><p>尽管针对框架、组件、类库等非业务系统的开发，我们一定要有组件化意识、框架意识、抽象意识，开发出来的东西要足够通用，不能局限于单一的某个业务需求，但这并不代表我们就可以脱离具体的应用场景，闷头拍脑袋做需求分析。多跟业务团队聊聊天，甚至自己去参与几个业务系统的开发，只有这样，我们才能真正知道业务系统的痛点，才能分析出最有价值的需求。不过，针对鉴权这一功能的开发，最大的需求方还是我们自己，所以，我们也可以先从满足我们自己系统的需求开始，然后再迭代优化。</p><p>现在，我们来看一下，针对鉴权这个功能的开发，我们该如何做需求分析？</p><p>实际上，这跟做算法题类似，先从最简单的方案想起，然后再优化。所以，我把整个的分析 过程分为了循序渐进的四轮。每一轮都是对上一轮的迭代优化，最后形成一个可执行、可落地的需求列表。</p><h4 id="1-第一轮基础分析"><a class="markdownIt-Anchor" href="#1-第一轮基础分析"></a> 1. 第一轮基础分析</h4><p>对于如何做鉴权这样一个问题，最简单的解决方案就是，通过用户名加密码来做认证。我们给每个允许访问我们服务的调用方，派发一个应用名（或者叫应用 ID、AppID）和一个对应的密码（或者叫秘钥）。调用方每次进行接口请求的时候，都携带自己的 AppID 和密码。微服务在接收到接口调用请求之后，会解析出 AppID 和密码，跟存储在微服务端的 AppID 和密码进行比对。如果一致，说明认证成功，则允许接口调用请求；否则，就拒绝接口调用请求。</p><h4 id="2-第二轮分析优化"><a class="markdownIt-Anchor" href="#2-第二轮分析优化"></a> 2. 第二轮分析优化</h4><p>不过，这样的验证方式，每次都要明文传输密码。密码很容易被截获，是不安全的。那如果我们借助加密算法（比如 SHA），对密码进行加密之后，再传递到微服务端验证，是不是就可以了呢？实际上，这样也是不安全的，因为加密之后的密码及 AppID，照样可以被未认证系统（或者说黑客）截获，未认证系统可以携带这个加密之后的密码以及对应的 AppID，伪装成已认证系统来访问我们的接口。这就是典型的“重放攻击”。</p><p>提出问题，然后再解决问题，是一个非常好的迭代优化方法。对于刚刚这个问题，我们可以借助 OAuth 的验证思路来解决。调用方将请求接口的 URL 跟 AppID、密码拼接在一起，然后进行加密，生成一个 token。调用方在进行接口请求的的时候，将这个 token 及 AppID，随 URL 一块传递给微服务端。微服务端接收到这些数据之后，根据 AppID 从数据库中取出对应的密码，并通过同样的 token 生成算法，生成另外一个 token。用这个新生成的 token 跟调用方传递过来的 token 对比。如果一致，则允许接口调用请求；否则， 就拒绝接口调用请求。</p><p><img src="C:%5CUsers%5Cn8g%5CPictures%5CTypora%5C%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B401.jpg" alt="" /></p><h4 id="3-第三轮分析优化"><a class="markdownIt-Anchor" href="#3-第三轮分析优化"></a> 3. 第三轮分析优化</h4><p>不过，这样的设计仍然存在重放攻击的风险，还是不够安全。每个 URL 拼接上 AppID、密码生成的 token 都是固定的。未认证系统截获 URL、token 和 AppID 之后，还是可以通过重放攻击的方式，伪装成认证系统，调用这个 URL 对应的接口。</p><p>为了解决这个问题，我们可以进一步优化 token 生成算法，引入一个随机变量，让每次接口请求生成的 token 都不一样。我们可以选择时间戳作为随机变量。原来的 token 是对 URL、AppID、密码三者进行加密生成的，现在我们将 URL、AppID、密码、时间戳四者进行加密来生成 token。调用方在进行接口请求的时候，将 token、AppID、时间戳，随 URL 一并传递给微服务端。</p><p>微服务端在收到这些数据之后，会验证当前时间戳跟传递过来的时间戳，是否在一定的时间窗口内（比如一分钟）。如果超过一分钟，则判定 token 过期，拒绝接口请求。如果没有超过一分钟，则说明 token 没有过期，就再通过同样的 token 生成算法，在服务端生成新的 token，与调用方传递过来的 token 比对，看是否一致。如果一致，则允许接口调用请求；否则，就拒绝接口调用请求。</p><p><img src="C:%5CUsers%5Cn8g%5CPictures%5CTypora%5C%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B402.jpg" alt="" /></p><h4 id="4-第四轮分析优化"><a class="markdownIt-Anchor" href="#4-第四轮分析优化"></a> 4. 第四轮分析优化</h4><p>不过，你可能会说，这样还是不够安全啊。未认证系统还是可以在这一分钟的 token 失效窗口内，通过截获请求、重放请求，来调用我们的接口啊！</p><p>你说得没错。不过，攻与防之间，本来就没有绝对的安全。我们能做的就是，尽量提高攻击的成本。这个方案虽然还有漏洞，但是实现起来足够简单，而且不会过度影响接口本身的性能（比如响应时间）。所以，权衡安全性、开发成本、对系统性能的影响，这个方案算是比较折中、比较合理的了。</p><p>实际上，还有一个细节我们没有考虑到，那就是，如何在微服务端存储每个授权调用方的 AppID 和密码。当然，这个问题并不难。最容易想到的方案就是存储到数据库里，比如 MySQL。不过，开发像鉴权这样的非业务功能，最好不要与具体的第三方系统有过度的耦合。</p><p>针对 AppID 和密码的存储，我们最好能灵活地支持各种不同的存储方式，比如 ZooKeeper、本地配置文件、自研配置中心、MySQL、Redis 等。我们不一定针对每种存储方式都去做代码实现，但起码要留有扩展点，保证系统有足够的灵活性和扩展性，能够在我们切换存储方式的时候，尽可能地减少代码的改动。</p><h4 id="5-最终确定需求"><a class="markdownIt-Anchor" href="#5-最终确定需求"></a> 5. 最终确定需求</h4><p>到此，需求已经足够细化和具体了。现在，我们按照鉴权的流程，对需求再重新描述一下。如果你熟悉 UML，也可以用时序图、流程图来描述。不过，用什么描述不是重点，描述清楚才是最重要的。考虑到在接下来的面向对象设计环节中，我会基于文字版本的需求描述，来进行类、属性、方法、交互等的设计，所以，这里我给出的最终需求描述是文字版本的。</p><ul><li>调用方进行接口请求的时候，将 URL、AppID、密码、时间戳拼接在一起，通过加密算法生成 token，并且将 token、AppID、时间戳拼接在 URL 中，一并发送到微服务端。</li><li>微服务端在接收到调用方的接口请求之后，从请求中拆解出 token、AppID、时间戳。</li><li>微服务端首先检查传递过来的时间戳跟当前时间，是否在 token 失效时间窗口内。如果已经超过失效时间，那就算接口调用鉴权失败，拒绝接口调用请求。</li><li>如果 token 验证没有过期失效，微服务端再从自己的存储中，取出 AppID 对应的密码，通过同样的 token 生成算法，生成另外一个 token，与调用方传递过来的 token 进 行匹配；如果一致，则鉴权成功，允许接口调用，否则就拒绝接口调用。</li></ul><p>这就是我们需求分析的整个思考过程，从最粗糙、最模糊的需求开始，通过“提出问题 - 解决问题”的方式，循序渐进地进行优化，最后得到一个足够清晰、可落地的需求描述。</p><h3 id="重点回顾"><a class="markdownIt-Anchor" href="#重点回顾"></a> 重点回顾</h3><p>针对框架、类库、组件等非业务系统的开发，其中一个比较大的难点就是，需求一般都比较抽象、模糊，需要你自己去挖掘，做合理取舍、权衡、假设，把抽象的问题具象化，最终产生清晰的、可落地的需求定义。需求定义是否清晰、合理，直接影响了后续的设计、编码实现是否顺畅。所以，作为程序员，你一定不要只关心设计与实现，前期的需求分析同等重要。</p><p>需求分析的过程实际上是一个不断迭代优化的过程。我们不要试图一下就能给出一个完美的解决方案，而是先给出一个粗糙的、基础的方案，有一个迭代的基础，然后再慢慢优化，这样一个思考过程能让我们摆脱无从下手的窘境。</p><h2 id="设计"><a class="markdownIt-Anchor" href="#设计"></a> 设计</h2><p>在上一节课中，针对接口鉴权功能的开发，我们讲了如何进行面向对象分析（OOA），也就是需求分析。实际上，需求定义清楚之后，这个问题就已经解决了一大半，这也是为什么我花了那么多篇幅来讲解需求分析。今天，我们再来看一下，针对面向对象分析产出的需求，如何来进行面向对象设计（OOD）和面向对象编程（OOP）。</p><h3 id="如何进行面向对象设计"><a class="markdownIt-Anchor" href="#如何进行面向对象设计"></a> 如何进行面向对象设计？</h3><p>我们知道，面向对象分析的产出是详细的需求描述，那面向对象设计的产出就是类。在面向对象设计环节，我们将需求描述转化为具体的类的设计。我们把这一设计环节拆解细化一下，主要包含以下几个部分：</p><ul><li>划分职责进而识别出有哪些类；</li><li>定义类及其属性和方法；</li><li>定义类与类之间的交互关系；</li><li>将类组装起来并提供执行入口。</li></ul><p>实话讲，不管是面向对象分析还是面向对象设计，理论的东西都不多，所以我们还是结合鉴权这个例子，在实战中体会如何做面向对象设计。</p><h3 id="1-划分职责进而识别出有哪些类"><a class="markdownIt-Anchor" href="#1-划分职责进而识别出有哪些类"></a> 1. 划分职责进而识别出有哪些类</h3><p>在面向对象有关书籍中经常讲到，类是现实世界中事物的一个建模。但是，并不是每个需求都能映射到现实世界，也并不是每个类都与现实世界中的事物一一对应。对于一些抽象的概念，我们是无法通过映射现实世界中的事物的方式来定义类的。</p><p>所以，大多数讲面向对象的书籍中，还会讲到另外一种识别类的方法，那就是把需求描述中的名词罗列出来，作为可能的候选类，然后再进行筛选。对于没有经验的初学者来说，这个方法比较简单、明确，可以直接照着做。</p><p>不过，我个人更喜欢另外一种方法，那就是根据需求描述，把其中涉及的功能点，一个一个罗列出来，然后再去看哪些功能点职责相近，操作同样的属性，可否应该归为同一个类。我们来看一下，针对鉴权这个例子，具体该如何来做。</p><p>在上一节课中，我们已经给出了详细的[需求描述](#5. 最终确定需求)。</p><p>首先，我们要做的是逐句阅读上面的需求描述，拆解成小的功能点，一条一条罗列下来。注意，拆解出来的每个功能点要尽可能的小。每个功能点只负责做一件很小的事情（专业叫法 是“单一职责”，后面章节中我们会讲到）。下面是我逐句拆解上述需求描述之后，得到的功能点列表：</p><ol><li>把 URL、AppID、密码、时间戳拼接为一个字符串；</li><li>对字符串通过加密算法加密生成 token；</li><li>将 token、AppID、时间戳拼接到 URL 中，形成新的 URL；</li><li>解析 URL，得到 token、AppID、时间戳等信息；</li><li>从存储中取出 AppID 和对应的密码；</li><li>根据时间戳判断 token 是否过期失效；</li><li>验证两个 token 是否匹配</li></ol><p>从上面的功能列表中，我们发现，1、2、6、7 都是跟 token 有关，负责 token 的生成、验证；3、4 都是在处理 URL，负责 URL 的拼接、解析；5 是操作 AppID 和密码，负责从存储中读取 AppID 和密码。所以，我们可以粗略地得到三个核心的类：AuthToken、Url、CredentialStorage。AuthToken 负责实现 1、2、6、7 这四个操作；Url 负责 3、4 两个操作；CredentialStorage 负责 5 这个操作。</p><p>当然，这是一个初步的类的划分，其他一些不重要的、边边角角的类，我们可能暂时没法一下子想全，但这也没关系，面向对象分析、设计、编程本来就是一个循环迭代、不断优化的过程。根据需求，我们先给出一个粗糙版本的设计方案，然后基于这样一个基础，再去迭代优化，会更加容易一些，思路也会更加清晰一些。</p><p>不过，我还要再强调一点，接口调用鉴权这个开发需求比较简单，所以，需求对应的面向对象设计并不复杂，识别出来的类也并不多。但如果我们面对的是更加大型的软件开发、更加复杂的需求开发，涉及的功能点可能会很多，对应的类也会比较多，像刚刚那样根据需求逐句罗列功能点的方法，最后会得到一个长长的列表，就会有点凌乱、没有规律。针对这种复杂的需求开发，我们首先要做的是进行模块划分，将需求先简单划分成几个小的、独立的功能模块，然后再在模块内部，应用我们刚刚讲的方法，进行面向对象设计。而模块的划分和识别，跟类的划分和识别，是类似的套路。</p><h3 id="2-定义类及其属性和方法"><a class="markdownIt-Anchor" href="#2-定义类及其属性和方法"></a> 2. 定义类及其属性和方法</h3><p>刚刚我们通过分析需求描述，识别出了三个核心的类，它们分别是 AuthToken、Url 和 CredentialStorage。现在我们来看下，每个类都有哪些属性和方法。我们还是从功能点列表中挖掘。</p><h4 id="authtoken-类"><a class="markdownIt-Anchor" href="#authtoken-类"></a> AuthToken 类</h4><p>AuthToken 类相关的功能点有四个：</p><ul><li>把 URL、AppID、密码、时间戳拼接为一个字符串；</li><li>对字符串通过加密算法加密生成 token；</li><li>根据时间戳判断 token 是否过期失效；</li><li>验证两个 token 是否匹配。</li></ul><p>对于方法的识别，很多面向对象相关的书籍，一般都是这么讲的，识别出需求描述中的动词，作为候选的方法，再进一步过滤筛选。类比一下方法的识别，我们可以把功能点中涉及的名词，作为候选属性，然后同样进行过滤筛选。</p><p>我们可以借用这个思路，根据功能点描述，识别出来 AuthToken 类的属性和方法，如下所示：</p><p><img src="C:%5CUsers%5Cn8g%5CPictures%5CTypora%5C%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B403.jpg" alt="" /></p><p>从上面的类图中，我们可以发现这样三个小细节：</p><ul><li>并不是所有出现的名词都被定义为类的属性，比如 URL、AppID、密码、 时间戳这几个名词，我们把它作为了方法的参数。</li><li>我们还需要挖掘一些没有出现在功能点描述中属性，比如 createTime，expireTimeInterval，它们用在 isExpired() 函数中，用来判定 token 是否过期。</li><li>我们还给 AuthToken 类添加了一个功能点描述中没有提到的方法 getToken()</li></ul><p>第一个细节告诉我们，从业务模型上来说，不应该属于这个类的属性和方法，不应该被放到这个类里。比如 URL、AppID 这些信息，从业务模型上来说，不应该属于 AuthToken，所以我们不应该放到这个类中。</p><p>第二、第三个细节告诉我们，在设计类具有哪些属性和方法的时候，不能单纯地依赖当下的需求，还要分析这个类从业务模型上来讲，理应具有哪些属性和方法。这样可以一方面保证类定义的完整性，另一方面不仅为当下的需求还为未来的需求做些准备。</p><h4 id="url-类"><a class="markdownIt-Anchor" href="#url-类"></a> Url 类</h4><p>Url 类相关的功能点有两个：</p><ul><li>将 token、AppID、时间戳拼接到 URL 中，形成新的 URL；</li><li>解析 URL，得到 token、AppID、时间戳等信息。</li></ul><p>虽然需求描述中，我们都是以 URL 来代指接口请求，但是，接口请求并不一定是以 URL 的形式来表达，还有可能是 dubbo RPC 等其他形式。为了让这个类更加通用，命名更加贴切，我们接下来把它命名为 ApiRequest。下面是我根据功能点描述设计的 ApiRequest 类。</p><p><img src="C:%5CUsers%5Cn8g%5CPictures%5CTypora%5C%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B404.jpg" alt="" /></p><h4 id="credentialstorage-类"><a class="markdownIt-Anchor" href="#credentialstorage-类"></a> CredentialStorage 类</h4><p>CredentialStorage 类相关的功能点有一个：</p><ul><li>从存储中取出 AppID 和对应的密码</li></ul><p>CredentialStorage 类非常简单，类图如下所示。为了做到抽象封装具体的存储方式，我们将 CredentialStorage 设计成了接口，基于接口而非具体的实现编程。</p><p><img src="C:%5CUsers%5Cn8g%5CPictures%5CTypora%5C%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B405.jpg" alt="" /></p><h3 id="3-定义类与类之间的交互关系"><a class="markdownIt-Anchor" href="#3-定义类与类之间的交互关系"></a> 3. 定义类与类之间的交互关系</h3><p>类与类之间都哪些交互关系呢？UML 统一建模语言中定义了六种类之间的关系。它们分别是：泛化、实现、关联、聚合、组合、依赖。关系比较多，而且有些还比较相近，比如聚合和组合，接下来我就逐一讲解一下。</p><h4 id="泛化generalization"><a class="markdownIt-Anchor" href="#泛化generalization"></a> 泛化（Generalization）</h4><p>泛化可以简单理解为继承关系。具体到 Java 代码就是下面这样：</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123; ... &#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">A</span> </span>&#123; ... &#125;<br></code></pre></td></tr></table></figure><h4 id="实现realization"><a class="markdownIt-Anchor" href="#实现realization"></a> 实现（Realization）</h4><p>实现一般是指接口和实现类之间的关系。具体到 Java 代码就是下面这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">A</span> </span>&#123;...&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">A</span> </span>&#123; ... &#125;<br></code></pre></td></tr></table></figure><h4 id="聚合aggregation"><a class="markdownIt-Anchor" href="#聚合aggregation"></a> 聚合（Aggregation）</h4><p>聚合是一种包含关系，A 类对象包含 B 类对象，B 类对象的生命周期可以不依赖 A 类对象的生命周期，也就是说可以单独销毁 A 类对象而不影响 B 对象，比如课程与学生之间的关系。具体到 Java 代码就是下面这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> B b;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">A</span><span class="hljs-params">(B b)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.b = b;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="组合composition"><a class="markdownIt-Anchor" href="#组合composition"></a> 组合（Composition）</h4><p>组合也是一种包含关系。A 类对象包含 B 类对象，B 类对象的生命周期跟依赖 A 类对象的生命周期，B 类对象不可单独存在，比如鸟与翅膀之间的关系。具体到 Java 代码就是下面这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> B b;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">A</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.b = <span class="hljs-keyword">new</span> B();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="关联association"><a class="markdownIt-Anchor" href="#关联association"></a> 关联（Association）</h4><p>关联是一种非常弱的关系，包含聚合、组合两种关系。具体到代码层面，如果 B 类对象是 A 类的成员变量，那 B 类和 A 类就是关联关系。具体到 Java 代码就是下面这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> B b;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">A</span><span class="hljs-params">(B b)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.b = b;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 或者</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> B b;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">A</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.b = <span class="hljs-keyword">new</span> B();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="依赖dependency"><a class="markdownIt-Anchor" href="#依赖dependency"></a> 依赖（Dependency）</h4><p>依赖是一种比关联关系更加弱的关系，包含关联关系。不管是 B 类对象是 A 类对象的成员变量，还是 A 类的方法使用 B 类对象作为参数或者返回值、局部变量，只要 B 类对象和 A 类对象有任何使用关系，我们都称它们有依赖关系。具体到 Java 代码就是下面这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> B b;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">A</span><span class="hljs-params">(B b)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.b = b;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 或者</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> B b;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">A</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.b = <span class="hljs-keyword">new</span> B();<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 或者</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">(B b)</span> </span>&#123; ... &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>看完了 UML 六种类关系的详细介绍，不知道你有何感受？我个人觉得这样拆分有点太细，增加了学习成本，对于指导编程开发没有太大意义。所以，我从更加贴近编程的角度，对类与类之间的关系做了调整，只保留了四个关系：泛化、实现、组合、依赖，这样你掌握起来 会更加容易。</p><p>其中，泛化、实现、依赖的定义不变，组合关系替代 UML 中组合、聚合、关联三个概念，也就相当于重新命名关联关系为组合关系，并且不再区分 UML 中的组合和聚合两个概念。之所以这样重新命名，是为了跟我们前面讲的“多用组合少用继承”设计原则中的“组合”统一含义。只要 B 类对象是 A 类对象的成员变量，那我们就称，A 类跟 B 类是组合关系。</p><p>理论的东西讲完了，让我们来看一下，刚刚我们定义的类之间都有哪些关系呢？因为目前只有三个核心的类，所以只用到了实现关系，也即 CredentialStorage 和 MysqlCredentialStorage 之间的关系。接下来讲到组装类的时候，我们还会用到依赖关系、组合关系，但是泛化关系暂时没有用到。</p><h3 id="4-将类组装起来并提供执行入口"><a class="markdownIt-Anchor" href="#4-将类组装起来并提供执行入口"></a> 4. 将类组装起来并提供执行入口</h3><p>类定义好了，类之间必要的交互关系也设计好了，接下来我们要将所有的类组装在一起，提供一个执行入口。这个入口可能是一个 main() 函数，也可能是一组给外部用的 API 接口。通过这个入口，我们能触发整个代码跑起来。</p><p>接口鉴权并不是一个独立运行的系统，而是一个集成在系统上运行的组件，所以，我们封装所有的实现细节，设计了一个最顶层的 ApiAuthencator 接口类，暴露一组给外部调用者使用的 API 接口，作为触发执行鉴权逻辑的入口。具体的类的设计如下所示：</p><h2 id="编程"><a class="markdownIt-Anchor" href="#编程"></a> 编程</h2><p>面向对象设计完成之后，我们已经定义清晰了类、属性、方法、类之间的交互，并且将所有的类组装起来，提供了统一的执行入口。接下来，面向对象编程的工作，就是将这些设计思路翻译成代码实现。有了前面的类图，这部分工作相对来说就比较简单了。所以，这里我只给出比较复杂的 ApiAuthencator 的实现。</p><p>对于 AuthToken、ApiRequest、CredentialStorage 这三个类，在这里我就不给出具体的代码实现了。给你留一个课后作业，你可以试着把整个鉴权框架自己去实现一遍。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ApiAuthencator</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">auth</span><span class="hljs-params">(String url)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">auth</span><span class="hljs-params">(ApiRequest apiRequest)</span></span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DefaultApiAuthencatorImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ApiAuthencator</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> CredentialStorage credentialStorage;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ApiAuthencator</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.credentialStorage = <span class="hljs-keyword">new</span> MysqlCredentialStorage();<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ApiAuthencator</span><span class="hljs-params">(CredentialStorage credentialStorage)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.credentialStorage = credentialStorage;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">auth</span><span class="hljs-params">(String url)</span> </span>&#123;<br>        ApiRequest apiRequest = ApiRequest.buildFromUrl(url);<br>        auth(apiRequest);<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">auth</span><span class="hljs-params">(ApiRequest apiRequest)</span> </span>&#123;<br>        String appId = apiRequest.getAppId();<br>        String token = apiRequest.getToken();<br>        <span class="hljs-keyword">long</span> timestamp = apiRequest.getTimestamp();<br>        String originalUrl = apiRequest.getOriginalUrl();<br>        <br>        AuthToken clientAuthToken = <span class="hljs-keyword">new</span> AuthToken(token, timestamp);<br>        <span class="hljs-keyword">if</span> (clientAuthToken.isExpired()) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;Token is expired.&quot;</span>);<br>        &#125;<br>        <br>        String password = credentialStorage.getPasswordByAppId(appId);<br>        AuthToken serverAuthToken = AuthToken.generate(originalUrl, appId, <span class="hljs-function">password</span><br><span class="hljs-function">        <span class="hljs-title">if</span> <span class="hljs-params">(!serverAuthToken.match(clientAuthToken)</span>) </span>&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;Token verfication failed.&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="辩证思考与灵活应用"><a class="markdownIt-Anchor" href="#辩证思考与灵活应用"></a> 辩证思考与灵活应用</h3><p>在之前的讲解中，面向对象分析、设计、实现，每个环节的界限划分都比较清楚。而且，设计和实现基本上是按照功能点的描述，逐句照着翻译过来的。这样做的好处是先做什么、后做什么，非常清晰、明确，有章可循，即便是没有太多设计经验的初级工程师，都可以按部就班地参照着这个流程来做分析、设计和实现。</p><p>不过，在平时的工作中，大部分程序员往往都是在脑子里或者草纸上完成面向对象分析和设计，然后就开始写代码了，边写边思考边重构，并不会严格地按照刚刚的流程来执行。而且，说实话，即便我们在写代码之前，花很多时间做分析和设计，绘制出完美的类图、UML 图，也不可能把每个细节、交互都想得很清楚。在落实到代码的时候，我们还是要反复迭代、重构、打破重写。</p><p>毕竟，整个软件开发本来就是一个迭代、修修补补、遇到问题解决问题的过程，是一个不断重构的过程。我们没法严格地按照顺序执行各个步骤。这就类似你去学驾照，驾校教的都是比较正规的流程，先做什么，后做什么，你只要照着做就能顺利倒车入库，但实际上，等你开熟练了，倒车入库很多时候靠的都是经验和感觉。</p><h3 id="重点回顾-2"><a class="markdownIt-Anchor" href="#重点回顾-2"></a> 重点回顾</h3><p>面向对象分析的产出是详细的需求描述。面向对象设计的产出是类。在面向对象设计这一环节中，我们将需求描述转化为具体的类的设计。这个环节的工作可以拆分为下面四个部分。</p><ol><li>划分职责进而识别出有哪些类</li><li>定义类及其属性和方法</li><li>定义类与类之间的交互关系</li><li>将类组装起来并提供执行入口</li></ol><p>软件设计的自由度很大，这也是软件的复杂之处。不同的人对类的划分、定义、类之间交互 的设计，可能都不大一样。那除了我今天给出的设计思路，你还有没有其他设计思路呢？</p>]]></content>
    
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring 应用统一参数校验</title>
    <link href="/2022/01/26/Spring-%E5%BA%94%E7%94%A8%E7%BB%9F%E4%B8%80%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C/"/>
    <url>/2022/01/26/Spring-%E5%BA%94%E7%94%A8%E7%BB%9F%E4%B8%80%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<h2 id="1-bean-validation-概述"><a class="markdownIt-Anchor" href="#1-bean-validation-概述"></a> 1. Bean Validation 概述</h2><p>Spring Boot 直接为“验证用户输入”这个常见且关键的任务提供了强大的支持。尽管 Spring Boot 支持与自定义验证器的无缝集成，但执行验证的事实标准是 Hibernate Validator，它同时也是 Java <strong><a href="https://beanvalidation.org/2.0/spec/#introduction-goals">Bean Validation</a></strong> 框架（JSR 303、349、380）的参考实现。其版本规范对应关系如下：</p><table><thead><tr><th>Bean Validation 版本</th><th>Java EE 版本</th><th>Hibernate 实现版本</th></tr></thead><tbody><tr><td>Bean Validation 1.0（JSR 303）</td><td>Java EE 6</td><td>4.3.1.Final</td></tr><tr><td>Bean Validation 1.1（JSR 349）</td><td>Java EE 7</td><td>5.1.1.Final</td></tr><tr><td>Bean Validation 2.0（JSR 380）</td><td>Java EE 8</td><td>6.0.1.Final</td></tr></tbody></table><blockquote><p><a href="https://beanvalidation.org/">https://beanvalidation.org/</a></p></blockquote><h2 id="2-maven-依赖"><a class="markdownIt-Anchor" href="#2-maven-依赖"></a> 2. maven 依赖</h2><ul><li><p>Bean Validation</p><figure class="highlight xml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.validation<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>validation-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.1.Final<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>Hibernate Validator（内含 validation-api）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.hibernate<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hibernate-validator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.0.17.Final<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>hibernate-validator 依赖 javax.el-api</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.glassfish<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.el<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>Spring Boot 2.3+ 提供的 starter</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="3-约束-constraint"><a class="markdownIt-Anchor" href="#3-约束-constraint"></a> 3. 约束 Constraint</h2><p><code>javax.validation.Constraint</code> 注解用于定义一个约束注解，其源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Target(&#123; ANNOTATION_TYPE &#125;)</span> <span class="hljs-comment">// 注解在注解上</span><br><span class="hljs-meta">@Retention(RUNTIME)</span> <span class="hljs-comment">// 运行时解析</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Constraint &#123;<br>    Class&lt;? extends ConstraintValidator&lt;?, ?&gt;&gt;[] validatedBy(); <span class="hljs-comment">// 校验器</span><br>&#125;<br></code></pre></td></tr></table></figure><p>注解了 <code>@Constraint</code> 的注解即为可用约束，然后通过指定的约束校验器 <code>ConstraintValidator</code> 实现校验功能。</p><h3 id="31-约束分类"><a class="markdownIt-Anchor" href="#31-约束分类"></a> 3.1. 约束分类</h3><p>Bean Validation 的约束是通过 Java 注解（annotation）标注实现的，按注解级别可分为以下三种：</p><ul><li><p>字段级（filed level）约束——标注在字段上，通过字段访问策略获取并验证，即 Bean Validation 会直接访问实例变量而不调用属性的访问器（getter）即使它存在，</p><ul><li>无所谓该字段的访问级别（private、public 或 protected）</li><li>不校验静态字段或属性</li></ul></li><li><p>属性级（property level）约束——标注在访问器（getter）上，Bean Validation 通过访问器方法访问属性</p><ul><li>优于前者之处是——“约束成为受约束类型 API 的一部分，用户无需检查类型的实现就可以知道现有的约束”</li><li>在一个类上使用字段或属性注解要统一，避免重复校验</li></ul></li><li><p>容器元素约束（container element constraints）——通过指定 <code>ElementType.TYPE_USE</code> 指定 <code>@Target</code> 的约束，可用于 <code>java.util.Iterable</code>、<code>java.util.Map</code>、<code>java.util.Optional</code> 等的实现并支持自定义容器类型。</p></li><li><p>类级别约束——注解在类上</p><ul><li><p>当需要同时校验多个属性来验证一个对象或一个属性在验证的时候需要另外的属性的信息的时候，类级别的约束会很有用。</p></li><li><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mycompany;<br><br><span class="hljs-keyword">import</span> javax.validation.constraints.Min;<br><span class="hljs-keyword">import</span> javax.validation.constraints.NotNull;<br><span class="hljs-keyword">import</span> javax.validation.constraints.Size;<br><br><span class="hljs-meta">@PassengerCount</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Car</span> </span>&#123;<br><br>    <span class="hljs-meta">@NotNull</span><br>    <span class="hljs-keyword">private</span> String manufacturer;<br><br>    <span class="hljs-meta">@NotNull</span><br>    <span class="hljs-meta">@Size(min = 2, max = 14)</span><br>    <span class="hljs-keyword">private</span> String licensePlate;<br><br>    <span class="hljs-meta">@Min(2)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> seatCount;<br>    <br>    <span class="hljs-keyword">private</span> List&lt;Person&gt; passengers;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Car</span><span class="hljs-params">(String manufacturer, String licencePlate, <span class="hljs-keyword">int</span> seatCount)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.manufacturer = manufacturer;<br>        <span class="hljs-keyword">this</span>.licensePlate = licencePlate;<br>        <span class="hljs-keyword">this</span>.seatCount = seatCount;<br>    &#125;<br><br>    <span class="hljs-comment">//getters and setters ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>自定义约束 <code>@PassengerCount</code> 实现保证这个车里乘客的数量不会超过它的座位数。</p></li></ul></li></ul><h3 id="32-约束的继承"><a class="markdownIt-Anchor" href="#32-约束的继承"></a> 3.2. 约束的继承</h3><p>基类或接口中的约束会在要校验的派生类或实现类对象校验时自动加载，重写方法上的约束也要继承并重复校验。</p><h3 id="33-关联校验和-valid-注解"><a class="markdownIt-Anchor" href="#33-关联校验和-valid-注解"></a> 3.3. 关联校验和 <code>@Valid</code> 注解</h3><p>Bean Validation API 不仅能够用来校验单个的实例对象，还能够用来校验完整的对象图。要使用这个功能，只需要在一个有关联关系的字段或者属性上标注 <code>@Valid</code>。这样，如果一个对象被校验，那么它的所有的标注了 <code>@Valid</code> 的关联对象都会被校验。</p><p>关联校验也适用于集合类型的字段。</p><p>应用于在应用控制层对前端请求参数进行校验的常见写法中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">XxxController</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> EntityCreateResponse <span class="hljs-title">create</span><span class="hljs-params">(<span class="hljs-meta">@Valid</span> EntityCreateRequest request)</span> </span>&#123;...&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong><code>@Valid</code> vs <code>@Validated</code></strong></p><p>前者是 JSR 303 API 提供用于关联校验，后者是 spring-context 提供用于指定校验组 groups，<br /><a href="https://www.baeldung.com/spring-valid-vs-validated">https://www.baeldung.com/spring-valid-vs-validated</a></p></blockquote><h3 id="34-bean-validation-api-内置约束注解"><a class="markdownIt-Anchor" href="#34-bean-validation-api-内置约束注解"></a> 3.4. Bean Validation API 内置约束注解</h3><p>Bean Validation API 中所有内置约束都适用于字段级别或属性级别，没有定义类级别的约束。</p><p>如果当前应用正在使用 Hibernate 对象关系映射技术，部分内置约束会对 DDL（数据库模式定义语言）的创建产生影响。</p><p>Hibernate Validator 允许一些约束被应用于比 Bean Validation 规范要求的更多的数据类型（例如 <code>@Max</code> 可以应用于字符串）。这个特性会影响应用程序在 Bean Validation 提供者之间的可移植性。（目前可用 JSR 380 实现只此一家，不用考虑这个问题）</p><table><thead><tr><th>注解</th><th>支持数据类型</th><th>作用</th><th>Hibernate 元数据影响</th></tr></thead><tbody><tr><td><code>@AssetFalse</code>、<code>@AssertTrue</code></td><td>Boolean、boolean</td><td>被标注的值须为假（真）</td><td>无</td></tr><tr><td><code>@DecimalMax</code>、<code>@DecimalMin</code></td><td>BigDecimal、BigInteger、String、any sub-type of Number</td><td>不大于约束中指定的最大（小）值</td><td>无</td></tr><tr><td><code>@Digits(integer=, fraction=)</code></td><td>同上</td><td>检查标注的值是否为最多为整数和分数的数字。</td><td>对应的数据库表字段会被设置精度(precision)和准度(scale)。</td></tr><tr><td><code>@Max</code>、<code>@Min</code></td><td>同上</td><td>&lt;=（&gt;=）</td><td>会给对应的数据库表字段添加一个 check 的约束条件。</td></tr><tr><td><code>@NotNull</code></td><td>Any Type</td><td>不为空</td><td>对应的表字段不允许为null。</td></tr><tr><td><code>@Pattern(regex=, flag=)</code></td><td>String</td><td>匹配指定正则表达式</td><td>无</td></tr><tr><td><code>@Size(min=, max=)</code></td><td>String、Collection、Arrays</td><td>min&lt;=size&lt;=max</td><td>对应的数据库表字段的长度会被设置成约束中定义的最大值。</td></tr><tr><td><code>@Valid</code></td><td>Any non-primitive type</td><td>递归的对关联对象进行校验，如果关联对象是个集合或者数组，那么对其中的元素进行递归校验，如果是一个map，则对其中的值部分进行校验。</td><td>无</td></tr></tbody></table><blockquote><p>由匹配正则处可知 validation-api 需要 javax.el-api 的支持。</p></blockquote><h3 id="35-hibernate-validator-添加的约束"><a class="markdownIt-Anchor" href="#35-hibernate-validator-添加的约束"></a> 3.5. Hibernate Validator 添加的约束</h3><p><code>@Email</code>、<code>@CreditCardNumber</code>、<code>@Length(min=, max=)</code>、<code>@NotBlank</code>、<code>@NotEmpty</code>、<code>@SafeHtml(whitelistType=, additionalTags=)</code>、<code>@URL(protocol=, host=, port=, regexp=, flags=)</code> 等，具体见</p><h2 id="4-校验器-validator"><a class="markdownIt-Anchor" href="#4-校验器-validator"></a> 4. 校验器 Validator</h2><p><code>javax.validation.Validator</code> 接口是最主要的 Bean Validation API。一个 <code>Validator</code> 实例能够用于验证 bean 实例及其关联对象。推荐将 <code>Validator</code> 实例缓存在 <code>ValidatorFactory</code> 中。<code>Validator</code> 须保证线程安全。</p><h3 id="41-获取一个-validator-实例"><a class="markdownIt-Anchor" href="#41-获取一个-validator-实例"></a> 4.1. 获取一个 Validator 实例</h3><p>对一个实体对象验证之前首先需要有个 <code>Validator</code> 对象，而这个对象是需要通过 <code>Validation</code> 类和 <code>ValidatorFactory</code> 来创建的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">ValidatorFactory factory = Validation.buildDefaultValidatorFactory();<br>Validator validator = factory.getValidator();<br></code></pre></td></tr></table></figure><blockquote><p><strong>其他获取 Validator 实例的方法</strong></p><ol><li><p><strong>Validation.byDefaultProvider()</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">Configuration&lt;?&gt; config = Validation.byDefaultProvider().configure();<br>config.messageInterpolator(<span class="hljs-keyword">new</span> MyMessageInterpolator())<br>    .traversableResolver( <span class="hljs-keyword">new</span> MyTraversableResolver())<br>    .constraintValidatorFactory(<span class="hljs-keyword">new</span> MyConstraintValidatorFactory());<br><br>ValidatorFactory factory = config.buildValidatorFactory();<br>Validator validator = factory.getValidator();<br></code></pre></td></tr></table></figure></li><li><p><strong>Validation.byProvider( HibernateValidator.class )</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">HibernateValidatorConfiguration config = Validation.byProvider( HibernateValidator.class ).configure();<br>config.messageInterpolator(<span class="hljs-keyword">new</span> MyMessageInterpolator())<br>    .traversableResolver( <span class="hljs-keyword">new</span> MyTraversableResolver())<br>    .constraintValidatorFactory(<span class="hljs-keyword">new</span> MyConstraintValidatorFactory());<br><br>ValidatorFactory factory = config.buildValidatorFactory();<br>Validator validator = factory.getValidator();<br></code></pre></td></tr></table></figure></li></ol></blockquote><p>以上方法获取的 <code>Validator</code> 实例均是线程安全的</p><h3 id="42-validate-方法"><a class="markdownIt-Anchor" href="#42-validate-方法"></a> 4.2. validate 方法</h3><p><code>Validator</code> 中有三个方法能够被用来校验实体对象或其属性：</p><ul><li><code>validate()</code></li><li><code>validateProperty()</code></li><li><code>validateValue()</code></li></ul><p>三者均返回 <code>ConstraintViolation&lt;T&gt;</code> 的集合，用法相似 <code>validateProperty()</code>  和 <code>validateValue()</code> 会忽略被验证属性上定义的 <code>@Valid</code>。</p><h3 id="43-constraintviolation"><a class="markdownIt-Anchor" href="#43-constraintviolation"></a> 4.3. ConstraintViolation</h3><p>violation 译为“违规；违反”，<code>ConstraintViolation</code> 即校验失败信息，它有如下方法</p><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td><code>getMessage()</code></td><td>校验错误信息</td></tr><tr><td><code>getMessageTemplate()</code></td><td>校验错误信息模板（可自定义）</td></tr><tr><td><code>getRootBean()</code></td><td>被校验的根实体对象</td></tr><tr><td><code>getRootBeanClass()</code></td><td>被校验的根实体类</td></tr><tr><td><code>getLeafBean()</code></td><td>被校验 Bean 的实例对象</td></tr><tr><td><code>getPropertyPath()</code></td><td>从根对象到被校验属性的路径</td></tr><tr><td><code>getInvalidValue()</code></td><td>导致校验失败的值</td></tr><tr><td><code>getConstraintDescriptor()</code></td><td>导致校验失败的约束定义</td></tr></tbody></table><h3 id="44-executablevalidator"><a class="markdownIt-Anchor" href="#44-executablevalidator"></a> 4.4. ExecutableValidator</h3><p><code>Validator</code> 接口还有一个重要方法：</p><ul><li><code>forExecutables()</code></li></ul><p>返回方法或构造函数验证的 contract（译为“合同”）。无参，返回 <code>ExecutableValidator</code> 接口的实例，接口下有函数</p><ul><li><code>validateParameters()</code></li><li><code>validateReturnValue()</code></li><li><code>validateConstructorParameters()</code></li><li><code>validateConstructorReturnValue()</code></li></ul><p>方法构造参数相关的验证通常不会通过手动调用，一般在拦截器、AOP 或动态代理技术中使用。</p><p>以下是验证拦截器中对这些方法的使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Interceptor</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SampleMethodInterceptor</span> </span>&#123;<br>    <span class="hljs-meta">@Inject</span><br>    <span class="hljs-keyword">private</span> Validator validator;<br><br>    <span class="hljs-meta">@AroundInvoke</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">validateMethodInvocation</span><span class="hljs-params">(InvocationContext ctx)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">//validate parameters</span><br>        Set&lt;ConstraintViolation&lt;Object&gt;&gt; violations;<br>        violations = validator.forExecutables().validateParameters(<br>                ctx.getTarget(),<br>                ctx.getMethod(),<br>                ctx.getParameters()<br>        );<br><br>        <span class="hljs-comment">//if a violation occurs for parameters, raise an exception</span><br>        <span class="hljs-keyword">if</span> ( !violations.isEmpty() ) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ConstraintViolationException(<br>                    buildMessage( ctx.getMethod(), ctx.getParameters(), violations ),<br>                    violations<br>            );<br>        &#125;<br><br>        <span class="hljs-comment">//execute the method proper</span><br>        Object result = ctx.proceed();<br><br>        <span class="hljs-comment">//validate the return type</span><br>        violations = validator.forExecutables().validateReturnValue(<br>                ctx.getTarget(),<br>                ctx.getMethod(),<br>                result<br>        );<br><br>        <span class="hljs-comment">//if a violation occurs for the return type, raise an exception</span><br>        <span class="hljs-keyword">if</span> ( !violations.isEmpty() ) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ConstraintViolationException(<br>                    buildMessage( ctx.getMethod(), ctx.getParameters(), violations ),<br>                    violations<br>            );<br>        &#125;<br><br>        <span class="hljs-comment">//return the result</span><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-自定义约束"><a class="markdownIt-Anchor" href="#5-自定义约束"></a> 5. 自定义约束</h2><h3 id="51-约束注解"><a class="markdownIt-Anchor" href="#51-约束注解"></a> 5.1. 约束注解</h3><p>内置约束 <code>@NotNull</code> 源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(&#123; METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER, TYPE_USE &#125;)</span><br><span class="hljs-meta">@Retention(RUNTIME)</span><br><span class="hljs-meta">@Repeatable(List.class)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Constraint(validatedBy = &#123; &#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> NotNull &#123;<br><br><span class="hljs-function">String <span class="hljs-title">message</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> &quot;</span>&#123;javax.validation.constraints.NotNull.message&#125;<span class="hljs-string">&quot;;</span><br><span class="hljs-string">Class&lt;?&gt;[] groups() default &#123; &#125;;</span><br><span class="hljs-string">Class&lt;? extends Payload&gt;[] payload() default &#123; &#125;;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    @Target(&#123; METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER, TYPE_USE &#125;)</span><br><span class="hljs-string">@Retention(RUNTIME)</span><br><span class="hljs-string">@Documented</span><br><span class="hljs-string">@interface List &#123;</span><br><span class="hljs-string">NotNull[] value();</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><p>参考易知自定义约束关键在以下两点</p><ul><li>实现三个强制性要求的属性<ul><li>message——校验失败消息</li><li>groups——校验组</li><li>payload——设计用于指定约束条件严重级别，不被 API 自身所用，供应用使用</li></ul></li><li><code>@Constraint(validatedBy = XxxValidator.class)</code> 指明使用那个校验器（类）去校验使用了此标注的元素。</li></ul><p>以定义一个 <code>@CheckCase</code> 约束注解为例，它用于验证字符串的大小写情况：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 枚举类 CaseMode 表示大写模式或小写模式</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">CaseMode</span> </span>&#123;   UPPER,   LOWER; &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// import ...</span><br><span class="hljs-meta">@Target( &#123; METHOD, FIELD, ANNOTATION_TYPE &#125;)</span><br><span class="hljs-meta">@Retention(RUNTIME)</span><br><span class="hljs-meta">@Constraint(validatedBy = CheckCaseValidator.class)</span> <span class="hljs-comment">// 指定约束校验器</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> CheckCase &#123;<br>    <span class="hljs-function">String <span class="hljs-title">message</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> &quot;</span>&#123;com.mycompany.constraints.checkcase&#125;<span class="hljs-string">&quot;;</span><br><span class="hljs-string">    Class&lt;?&gt;[] groups() default &#123;&#125;;</span><br><span class="hljs-string">    Class&lt;? extends Payload&gt;[] payload() default &#123;&#125;;</span><br><span class="hljs-string">    CaseMode value();</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="52-约束校验器-constraintvalidator"><a class="markdownIt-Anchor" href="#52-约束校验器-constraintvalidator"></a> 5.2. 约束校验器 ConstraintValidator</h3><p>下一步是实现 <code>ConstraintValidator</code> 接口。在类上定义约束时，正在验证的类实例将传递给 <code>ConstraintValidator</code>。在字段上定义约束时，该字段的值将传递给 <code>ConstraintValidator</code> 。当在 getter() 上定义约束时，getter() 调用的结果将传递给 <code>ConstraintValidator</code>。</p><p>须指定两个泛型参数——第一个是校验器所服务到标注类型（即自定义约束注解类），第二个为需要校验的数据类型（本例中是 <code>@CheckCase</code> 和 <code>String</code>）</p><p>并重写 <code>initialize()</code> 方法和 <code>isValid()</code> 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.validation.ConstraintValidator;<br><span class="hljs-keyword">import</span> javax.validation.ConstraintValidatorContext;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CheckCaseValidator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ConstraintValidator</span>&lt;<span class="hljs-title">CheckCase</span>, <span class="hljs-title">String</span>&gt; </span>&#123;<br>    <span class="hljs-keyword">private</span> CaseMode caseMode;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initialize</span><span class="hljs-params">(CheckCase constraintAnnotation)</span> </span>&#123; <span class="hljs-keyword">this</span>.caseMode = constraintAnnotation.value(); &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isValid</span><span class="hljs-params">(String object, ConstraintValidatorContext constraintContext)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (object == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">if</span> (caseMode == CaseMode.UPPER) <span class="hljs-keyword">return</span> object.equals(object.toUpperCase());<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> object.equals(object.toLowerCase());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="53-约束校验器上下文-constraintvalidatorcontext"><a class="markdownIt-Anchor" href="#53-约束校验器上下文-constraintvalidatorcontext"></a> 5.3. 约束校验器上下文 ConstraintValidatorContext</h3><p>通过使用传入的 <code>ConstraintValidatorContext</code> 对象, 我们还可以给约束条件中定义的错误信息模板来添加额外的信息或者完全创建一个新的错误信息模板。如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isValid</span><span class="hljs-params">(String object, ConstraintValidatorContext constraintContext)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (object == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    <span class="hljs-keyword">boolean</span> isValid;<br>    <span class="hljs-keyword">if</span> (caseMode == CaseMode.UPPER) isValid = object.equals(object.toUpperCase());<br>    <span class="hljs-keyword">else</span> isValid = object.equals(object.toLowerCase());<br>    <span class="hljs-keyword">if</span>(!isValid) &#123;<br>    constraintContext.disableDefaultConstraintViolation();<br>    constraintContext<br>            .buildConstraintViolationWithTemplate(<span class="hljs-string">&quot;&#123;com.mycompany.constraints.CheckCase.message&#125;&quot;</span>)<br>            .addConstraintViolation();<br>    &#125;<br>    <span class="hljs-keyword">return</span> isValid;<br>&#125;<br></code></pre></td></tr></table></figure><p>在本例中, 实际上通过调用 <code>ConstraintValidatorContext</code> 达到了一个使用默认消息模板的效果。</p><h3 id="54-使用演示"><a class="markdownIt-Anchor" href="#54-使用演示"></a> 5.4. 使用演示</h3><p><strong>model</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">xxxEntity</span> </span>&#123;<br>    <span class="hljs-meta">@NotNull</span><br>    <span class="hljs-meta">@Size(min = 2, max = 14)</span><br>    <span class="hljs-meta">@CheckCase(CaseMode.UPPER)</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-comment">// constructor, setter and getter</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>properties</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">com.mycompany.constraints.CheckCase.message</span>=<span class="hljs-string">Case mode must be &#123;value&#125;.</span><br></code></pre></td></tr></table></figure><p><strong>junit test</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">XxxTest</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Validator validator;<br>    <span class="hljs-meta">@BeforeClass</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUp</span><span class="hljs-params">()</span> </span>&#123;<br>        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();<br>        validator = factory.getValidator();<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testNameNotUpperCase</span><span class="hljs-params">()</span> </span>&#123;<br>        XxxEntity entity = <span class="hljs-keyword">new</span> XxxEntity(<span class="hljs-string">&quot;aaabbbccc&quot;</span>);<br>        Set&lt;ConstraintViolation&lt;XxxEntity&gt;&gt; constraintViolations = validator.validate(entity);<br>        assertEquals(<span class="hljs-number">1</span>, constraintViolations.size());<br>        assertEquals(<span class="hljs-string">&quot;Case mode must be UPPER.&quot;</span>, constraintViolations.iterator().next().getMessage());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>例中同一属性上的多个注解也可以定义成组合注解。</p><h2 id="6-统一异常处理"><a class="markdownIt-Anchor" href="#6-统一异常处理"></a> 6. 统一异常处理</h2><h3 id="61-restcontrolleradvice-和-exceptionhandler"><a class="markdownIt-Anchor" href="#61-restcontrolleradvice-和-exceptionhandler"></a> 6.1. RestControllerAdvice 和 ExceptionHandler</h3><p>前文只是梳理了 Bean Validation 规范的基础概念和其实现 Hibernate Validator 的基本使用。实现自定义参数校验后，Web 应用还需要对参数校验结果做统一异常处理，处理成统一的格式（例中是 <code>BaseResponse</code>）抛出到前端。</p><p>Spring Web Restful 应用中，这个捕获异常并统一处理的机制是 <code>RestControllerAdvice</code> + <code>ExceptionHandler</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GlobalExceptionTranslator</span> </span>&#123;<br>    ...<br><br>    <span class="hljs-meta">@ExceptionHandler(ConstraintViolationException .class)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> BaseResponse <span class="hljs-title">handleError</span><span class="hljs-params">(ConstraintViolationException e)</span> </span>&#123;...&#125;<br><br>    <span class="hljs-meta">@ExceptionHandler(MethodArgumentNotValidException.class)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> BaseResponse <span class="hljs-title">handleError</span><span class="hljs-params">(MethodArgumentNotValidException e)</span> </span>&#123;...&#125;<br><br>    <span class="hljs-meta">@ExceptionHandler(Throwable.class)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> BaseResponse <span class="hljs-title">handleError</span><span class="hljs-params">(Throwable e)</span> </span>&#123;...&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><a href="https://blog.csdn.net/weixin_36142042/article/details/104850543">@RestControllerAdvice 全局异常处理起作用的原理</a></p></blockquote><p>Spring Mvc 应用中统一异常处理方式由于需返回 HTML 页面，实现方式则是，实现 <code>ErrorController</code> 接口，定制不同页面。</p><h3 id="62-spring-security-统一异常处理"><a class="markdownIt-Anchor" href="#62-spring-security-统一异常处理"></a> 6.2. spring security 统一异常处理</h3><p><a href="#">待填</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>堆建立的两种方法——“上浮”和“下沉”</title>
    <link href="/2022/01/10/%E5%A0%86%E5%BB%BA%E7%AB%8B%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95%E2%80%94%E2%80%94%E2%80%9C%E4%B8%8A%E6%B5%AE%E2%80%9D%E5%92%8C%E2%80%9C%E4%B8%8B%E6%B2%89%E2%80%9D/"/>
    <url>/2022/01/10/%E5%A0%86%E5%BB%BA%E7%AB%8B%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95%E2%80%94%E2%80%94%E2%80%9C%E4%B8%8A%E6%B5%AE%E2%80%9D%E5%92%8C%E2%80%9C%E4%B8%8B%E6%B2%89%E2%80%9D/</url>
    
    <content type="html"><![CDATA[<h3 id="堆结构"><a class="markdownIt-Anchor" href="#堆结构"></a> 堆结构</h3><p>堆通常是一个可以被看做一棵完全二叉树的数组对象。核心也是唯一特征是堆中某个节点的值总是不大于或不小于其父节点的值。</p><p><img src="https://s2.loli.net/2022/01/09/JlEo2LXAwrDtTSR.png" alt="image-20190914152039272.png" /></p><h3 id="建堆算法"><a class="markdownIt-Anchor" href="#建堆算法"></a> 建堆算法</h3><p>以大顶堆为例讨论两种常用的堆建立的方法</p><h4 id="1-上浮"><a class="markdownIt-Anchor" href="#1-上浮"></a> 1. “上浮”</h4><p>一个常见场景是要在无序而数据量未知的输入流中动态地建立堆。这种场景下建堆实现较简单，即依次将新结点插入到堆中。</p><h5 id="算法思路和实现"><a class="markdownIt-Anchor" href="#算法思路和实现"></a> 算法思路和实现</h5><p>对每个新结点同父节点比较，大于父结点就与之交换，然后递归这个过程直到根节点，类似一个“上浮”的过程。</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildMaxHeap</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] heap)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; heap.length; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i; j &gt; <span class="hljs-number">0</span>; j = (j - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">int</span> parent = heap[(j - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>];<br>            <span class="hljs-keyword">if</span> (parent &lt; heap[j]) &#123;<br>                heap[(j - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>] = heap[j];<br>                heap[j] = parent;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="性能"><a class="markdownIt-Anchor" href="#性能"></a> 性能</h5><p>算法的时间复杂度分析也较为容易，设输入数组长为 N，堆的深度为 log<sub>2</sub>N（设为 k），考虑最坏情况：要用 <code>[0, 1, 2, 3, 4, 5...]</code> 建立大顶堆</p><ol><li>第 1 层 1 个结点（0）比较 0 次交换 0 次</li><li>第 2 层 2 个结点（1，2）各比较 1 次交换 1 次</li><li>第 3 层 4 个结点（3，4，5，6）各比较 2 次交换 2 次</li><li>第 i 层 2<sup>i-1</sup> 个结点各比较 i 次交换 i 次</li><li>…</li></ol><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mi>k</mi></munderover><msup><mn>2</mn><mi>i</mi></msup><mo>∗</mo><mi>i</mi></mrow><annotation encoding="application/x-tex">S = \sum_{i=0}^{k} 2^i*i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.1137820000000005em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8361130000000003em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8746639999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mo>=</mo><mn>2</mn><mi>S</mi><mo>−</mo><mi>S</mi><mspace linebreak="newline"></mspace><mo>=</mo><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mi>k</mi></munderover><msup><mn>2</mn><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msup><mo>∗</mo><mi>i</mi></mrow><mo>−</mo><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mi>k</mi></munderover><msup><mn>2</mn><mi>i</mi></msup><mo>∗</mo><mi>i</mi></mrow><mspace linebreak="newline"></mspace><mo>=</mo><mo stretchy="false">(</mo><mi>k</mi><mo>−</mo><mn>2</mn><mo stretchy="false">)</mo><msup><mn>2</mn><mi>k</mi></msup><mo>−</mo><mn>4</mn></mrow><annotation encoding="application/x-tex">S=2S-S\\={\sum_{i=0}^{k} 2^{i+1}*i}-{\sum_{i=0}^{k}2^i*i}\\=(k-2)2^k-4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.1137820000000005em;vertical-align:-1.277669em;"></span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8361130000000003em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.874664em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">i</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:3.1137820000000005em;vertical-align:-1.277669em;"></span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8361130000000003em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8746639999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">i</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.149108em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span></span></span></span></span></p><p>即时间复杂度为 O(nlogn)</p><h4 id="2-下沉"><a class="markdownIt-Anchor" href="#2-下沉"></a> 2. “下沉”</h4><p>适用场景是将给定的数组调整为堆，性能更好，也是堆排序的常用建堆方式。</p><h5 id="算法思路和实现-2"><a class="markdownIt-Anchor" href="#算法思路和实现-2"></a> 算法思路和实现</h5><p>相对前者，它是一种自底向上建堆的方法，即从后向前遍历，判断当前结点与其两个孩子结点的大小关系，小于孩子结点则交换，类似一个“下沉”的过程。</p><p><code>arr.length/2 - 1</code> 是最后一个非叶结点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildMaxHeap</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = arr.length / <span class="hljs-number">2</span> - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>        heapAdjust(arr, i, arr.length);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">heapAdjust</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] heap, <span class="hljs-keyword">int</span> start, <span class="hljs-keyword">int</span> end)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> rc = heap[start]; <span class="hljs-comment">// 记录该要调整的结点</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span> * start + <span class="hljs-number">1</span>; i &lt; end; i = i * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">if</span> (i + <span class="hljs-number">1</span> &lt; end &amp;&amp; heap[i] &lt; heap[i + <span class="hljs-number">1</span>]) i++; <span class="hljs-comment">// 取左右孩子中较大结点</span><br>        <span class="hljs-keyword">if</span> (rc &lt; heap[i]) &#123;<br>            heap[start] = heap[i]; <span class="hljs-comment">// 更新当前要调整的结点值的</span><br>            start = i; <span class="hljs-comment">// 下沉</span><br>        &#125;<br>    &#125;<br>    heap[start] = rc; <span class="hljs-comment">// 插入根节点（归位）</span><br>&#125;<br></code></pre></td></tr></table></figure><p>递归写法易读性更好</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">heapAdjust</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] heap, <span class="hljs-keyword">int</span> start, <span class="hljs-keyword">int</span> end)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (start &gt;= end) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">int</span> rc = heap[start];<br>    <span class="hljs-comment">// 取左右孩子结点点中较大者下标为 i</span><br>    <span class="hljs-keyword">int</span> i = start * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (i + <span class="hljs-number">1</span> &lt; end &amp;&amp; heap[i] &lt; heap[i + <span class="hljs-number">1</span>]) i++;<br>    <span class="hljs-keyword">if</span> (i &lt; end &amp;&amp; rc &lt; heap[i]) &#123;<br>        heap[start] = heap[i];<br>        heap[i] = rc;<br>        heapAdjust2(heap, i, end);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>算法参考了严蔚敏奶奶《数据结构》教材的实现，交换这一过程处理相对巧妙</p><h5 id="性能分析"><a class="markdownIt-Anchor" href="#性能分析"></a> 性能分析</h5><p>设输入数组长为 N，堆的深度为 log<sub>2</sub>N（设为 k），考虑最坏情况：要用 <code>[0, 1, 2, 3, 4, 5...]</code> 建立大顶堆</p><ol><li>第 k 层 2<sup>k-1</sup> 个结点均为叶子结点不需要考虑</li><li>第 k-1 层 2<sup>k-2</sup> 个结点各比较 1 次交换 1 次</li><li>…</li><li>第 3 层 4 个结点（3，4，5，6）各比较 k-3 次交换 k-3 次</li><li>第 2 层 2 个结点（1，2）各比较 k-2 次交换 k-2 次</li><li>第 1 层根节点（1）比较 k-1 次，交换 k-1 次</li></ol><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></munderover><msup><mn>2</mn><mrow><mi>k</mi><mo>−</mo><mi>i</mi></mrow></msup><mo stretchy="false">(</mo><mi>k</mi><mo>−</mo><mi>i</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">S = \sum_{i=1}^{k-1} 2^{k-i}(k-i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.1137820000000005em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8361130000000003em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">i</span><span class="mclose">)</span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mo>=</mo><mn>2</mn><mi>S</mi><mo>−</mo><mi>S</mi><mspace linebreak="newline"></mspace><mo>=</mo><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></munderover><msup><mn>2</mn><mrow><mi>k</mi><mo>−</mo><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msup><mo stretchy="false">(</mo><mi>k</mi><mo>−</mo><mi>i</mi><mo stretchy="false">)</mo></mrow><mo>−</mo><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></munderover><msup><mn>2</mn><mrow><mi>k</mi><mo>−</mo><mi>i</mi></mrow></msup><mo stretchy="false">(</mo><mi>k</mi><mo>−</mo><mi>i</mi><mo stretchy="false">)</mo></mrow><mspace linebreak="newline"></mspace><mo>=</mo><msup><mn>2</mn><mi>k</mi></msup><mo>−</mo><mi>k</mi><mspace linebreak="newline"></mspace><mo>=</mo><mi>N</mi><mo>−</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>N</mi></mrow><annotation encoding="application/x-tex">S=2S-S\\={\sum_{i=1}^{k-1}2^{k-i+1}(k-i)}-{\sum_{i=1}^{k-1}2^{k-i}(k-i)}\\=2^k-k\\=N - \log_{2}{N}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.1137820000000005em;vertical-align:-1.277669em;"></span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8361130000000003em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">i</span><span class="mclose">)</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:3.1137820000000005em;vertical-align:-1.277669em;"></span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8361130000000003em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">i</span><span class="mclose">)</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9824379999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.93858em;vertical-align:-0.24414em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span></span></span></p><ul><li>S = k-1 + 2(k-2) + 2<sup>2</sup>(k-3) + 2<sup>3</sup>(k-4) + … + 2<sup>k-3</sup> * 2 + 2<sup>k-2</sup></li><li>2S =        2(k-1) + 2<sup>2</sup>(k-2) + 2<sup>3</sup>(k-3) + … + 2<sup>k-3</sup> * 3 + 2 <sup>k-2</sup> *2 + 2<sup>k-1</sup></li></ul><p>即时间复杂度为 O(n)</p>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/01/09/hello-world/"/>
    <url>/2022/01/09/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
