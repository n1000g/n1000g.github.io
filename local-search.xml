<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Spring 应用统一参数校验</title>
    <link href="/2022/01/26/Spring-%E5%BA%94%E7%94%A8%E7%BB%9F%E4%B8%80%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C/"/>
    <url>/2022/01/26/Spring-%E5%BA%94%E7%94%A8%E7%BB%9F%E4%B8%80%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<h2 id="1-bean-validation-概述"><a class="markdownIt-Anchor" href="#1-bean-validation-概述"></a> 1. Bean Validation 概述</h2><p>Spring Boot 直接为“验证用户输入”这个常见且关键的任务提供了强大的支持。尽管 Spring Boot 支持与自定义验证器的无缝集成，但执行验证的事实标准是 Hibernate Validator，它同时也是 Java <strong><a href="https://beanvalidation.org/2.0/spec/#introduction-goals">Bean Validation</a></strong> 框架（JSR 303、349、380）的参考实现。其版本规范对应关系如下：</p><table><thead><tr><th>Bean Validation 版本</th><th>Java EE 版本</th><th>Hibernate 实现版本</th></tr></thead><tbody><tr><td>Bean Validation 1.0（JSR 303）</td><td>Java EE 6</td><td>4.3.1.Final</td></tr><tr><td>Bean Validation 1.1（JSR 349）</td><td>Java EE 7</td><td>5.1.1.Final</td></tr><tr><td>Bean Validation 2.0（JSR 380）</td><td>Java EE 8</td><td>6.0.1.Final</td></tr></tbody></table><blockquote><p><a href="https://beanvalidation.org/">https://beanvalidation.org/</a></p></blockquote><h2 id="2-maven-依赖"><a class="markdownIt-Anchor" href="#2-maven-依赖"></a> 2. maven 依赖</h2><ul><li><p>Bean Validation</p><figure class="highlight xml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.validation<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>validation-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.1.Final<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>Hibernate Validator（内含 validation-api）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.hibernate<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hibernate-validator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.0.17.Final<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>hibernate-validator 依赖 javax.el-api</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.glassfish<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.el<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>Spring Boot 2.3+ 提供的 starter</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="3-约束-constraint"><a class="markdownIt-Anchor" href="#3-约束-constraint"></a> 3. 约束 Constraint</h2><p><code>javax.validation.Constraint</code> 注解用于定义一个约束注解，其源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Target(&#123; ANNOTATION_TYPE &#125;)</span> <span class="hljs-comment">// 注解在注解上</span><br><span class="hljs-meta">@Retention(RUNTIME)</span> <span class="hljs-comment">// 运行时解析</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Constraint &#123;<br>    Class&lt;? extends ConstraintValidator&lt;?, ?&gt;&gt;[] validatedBy(); <span class="hljs-comment">// 校验器</span><br>&#125;<br></code></pre></td></tr></table></figure><p>注解了 <code>@Constraint</code> 的注解即为可用约束，然后通过指定的约束校验器 <code>ConstraintValidator</code> 实现校验功能。</p><h3 id="31-约束分类"><a class="markdownIt-Anchor" href="#31-约束分类"></a> 3.1. 约束分类</h3><p>Bean Validation 的约束是通过 Java 注解（annotation）标注实现的，按注解级别可分为以下三种：</p><ul><li><p>字段级（filed level）约束——标注在字段上，通过字段访问策略获取并验证，即 Bean Validation 会直接访问实例变量而不调用属性的访问器（getter）即使它存在，</p><ul><li>无所谓该字段的访问级别（private、public 或 protected）</li><li>不校验静态字段或属性</li></ul></li><li><p>属性级（property level）约束——标注在访问器（getter）上，Bean Validation 通过访问器方法访问属性</p><ul><li>优于前者之处是——“约束成为受约束类型 API 的一部分，用户无需检查类型的实现就可以知道现有的约束”</li><li>在一个类上使用字段或属性注解要统一，避免重复校验</li></ul></li><li><p>容器元素约束（container element constraints）——通过指定 <code>ElementType.TYPE_USE</code> 指定 <code>@Target</code> 的约束，可用于 <code>java.util.Iterable</code>、<code>java.util.Map</code>、<code>java.util.Optional</code> 等的实现并支持自定义容器类型。</p></li><li><p>类级别约束——注解在类上</p><ul><li><p>当需要同时校验多个属性来验证一个对象或一个属性在验证的时候需要另外的属性的信息的时候，类级别的约束会很有用。</p></li><li><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mycompany;<br><br><span class="hljs-keyword">import</span> javax.validation.constraints.Min;<br><span class="hljs-keyword">import</span> javax.validation.constraints.NotNull;<br><span class="hljs-keyword">import</span> javax.validation.constraints.Size;<br><br><span class="hljs-meta">@PassengerCount</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Car</span> </span>&#123;<br><br>    <span class="hljs-meta">@NotNull</span><br>    <span class="hljs-keyword">private</span> String manufacturer;<br><br>    <span class="hljs-meta">@NotNull</span><br>    <span class="hljs-meta">@Size(min = 2, max = 14)</span><br>    <span class="hljs-keyword">private</span> String licensePlate;<br><br>    <span class="hljs-meta">@Min(2)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> seatCount;<br>    <br>    <span class="hljs-keyword">private</span> List&lt;Person&gt; passengers;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Car</span><span class="hljs-params">(String manufacturer, String licencePlate, <span class="hljs-keyword">int</span> seatCount)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.manufacturer = manufacturer;<br>        <span class="hljs-keyword">this</span>.licensePlate = licencePlate;<br>        <span class="hljs-keyword">this</span>.seatCount = seatCount;<br>    &#125;<br><br>    <span class="hljs-comment">//getters and setters ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>自定义约束 <code>@PassengerCount</code> 实现保证这个车里乘客的数量不会超过它的座位数。</p></li></ul></li></ul><h3 id="32-约束的继承"><a class="markdownIt-Anchor" href="#32-约束的继承"></a> 3.2. 约束的继承</h3><p>基类或接口中的约束会在要校验的派生类或实现类对象校验时自动加载，重写方法上的约束也要继承并重复校验。</p><h3 id="33-关联校验和-valid-注解"><a class="markdownIt-Anchor" href="#33-关联校验和-valid-注解"></a> 3.3. 关联校验和 <code>@Valid</code> 注解</h3><p>Bean Validation API 不仅能够用来校验单个的实例对象，还能够用来校验完整的对象图。要使用这个功能，只需要在一个有关联关系的字段或者属性上标注 <code>@Valid</code>。这样，如果一个对象被校验，那么它的所有的标注了 <code>@Valid</code> 的关联对象都会被校验。</p><p>关联校验也适用于集合类型的字段。</p><p>应用于在应用控制层对前端请求参数进行校验的常见写法中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">XxxController</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> EntityCreateResponse <span class="hljs-title">create</span><span class="hljs-params">(<span class="hljs-meta">@Valid</span> EntityCreateRequest request)</span> </span>&#123;...&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong><code>@Valid</code> vs <code>@Validated</code></strong></p><p>前者是 JSR 303 API 提供用于关联校验，后者是 spring-context 提供用于指定校验组 groups，<br /><a href="https://www.baeldung.com/spring-valid-vs-validated">https://www.baeldung.com/spring-valid-vs-validated</a></p></blockquote><h3 id="34-bean-validation-api-内置约束注解"><a class="markdownIt-Anchor" href="#34-bean-validation-api-内置约束注解"></a> 3.4. Bean Validation API 内置约束注解</h3><p>Bean Validation API 中所有内置约束都适用于字段级别或属性级别，没有定义类级别的约束。</p><p>如果当前应用正在使用 Hibernate 对象关系映射技术，部分内置约束会对 DDL（数据库模式定义语言）的创建产生影响。</p><p>Hibernate Validator 允许一些约束被应用于比 Bean Validation 规范要求的更多的数据类型（例如 <code>@Max</code> 可以应用于字符串）。这个特性会影响应用程序在 Bean Validation 提供者之间的可移植性。（目前可用 JSR 380 实现只此一家，不用考虑这个问题）</p><table><thead><tr><th>注解</th><th>支持数据类型</th><th>作用</th><th>Hibernate 元数据影响</th></tr></thead><tbody><tr><td><code>@AssetFalse</code>、<code>@AssertTrue</code></td><td>Boolean、boolean</td><td>被标注的值须为假（真）</td><td>无</td></tr><tr><td><code>@DecimalMax</code>、<code>@DecimalMin</code></td><td>BigDecimal、BigInteger、String、any sub-type of Number</td><td>不大于约束中指定的最大（小）值</td><td>无</td></tr><tr><td><code>@Digits(integer=, fraction=)</code></td><td>同上</td><td>检查标注的值是否为最多为整数和分数的数字。</td><td>对应的数据库表字段会被设置精度(precision)和准度(scale)。</td></tr><tr><td><code>@Max</code>、<code>@Min</code></td><td>同上</td><td>&lt;=（&gt;=）</td><td>会给对应的数据库表字段添加一个 check 的约束条件。</td></tr><tr><td><code>@NotNull</code></td><td>Any Type</td><td>不为空</td><td>对应的表字段不允许为null。</td></tr><tr><td><code>@Pattern(regex=, flag=)</code></td><td>String</td><td>匹配指定正则表达式</td><td>无</td></tr><tr><td><code>@Size(min=, max=)</code></td><td>String、Collection、Arrays</td><td>min&lt;=size&lt;=max</td><td>对应的数据库表字段的长度会被设置成约束中定义的最大值。</td></tr><tr><td><code>@Valid</code></td><td>Any non-primitive type</td><td>递归的对关联对象进行校验，如果关联对象是个集合或者数组，那么对其中的元素进行递归校验，如果是一个map，则对其中的值部分进行校验。</td><td>无</td></tr></tbody></table><blockquote><p>由匹配正则处可知 validation-api 需要 javax.el-api 的支持。</p></blockquote><h3 id="35-hibernate-validator-添加的约束"><a class="markdownIt-Anchor" href="#35-hibernate-validator-添加的约束"></a> 3.5. Hibernate Validator 添加的约束</h3><p><code>@Email</code>、<code>@CreditCardNumber</code>、<code>@Length(min=, max=)</code>、<code>@NotBlank</code>、<code>@NotEmpty</code>、<code>@SafeHtml(whitelistType=, additionalTags=)</code>、<code>@URL(protocol=, host=, port=, regexp=, flags=)</code> 等，具体见</p><h2 id="4-校验器-validator"><a class="markdownIt-Anchor" href="#4-校验器-validator"></a> 4. 校验器 Validator</h2><p><code>javax.validation.Validator</code> 接口是最主要的 Bean Validation API。一个 <code>Validator</code> 实例能够用于验证 bean 实例及其关联对象。推荐将 <code>Validator</code> 实例缓存在 <code>ValidatorFactory</code> 中。<code>Validator</code> 须保证线程安全。</p><h3 id="41-获取一个-validator-实例"><a class="markdownIt-Anchor" href="#41-获取一个-validator-实例"></a> 4.1. 获取一个 Validator 实例</h3><p>对一个实体对象验证之前首先需要有个 <code>Validator</code> 对象，而这个对象是需要通过 <code>Validation</code> 类和 <code>ValidatorFactory</code> 来创建的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">ValidatorFactory factory = Validation.buildDefaultValidatorFactory();<br>Validator validator = factory.getValidator();<br></code></pre></td></tr></table></figure><blockquote><p><strong>其他获取 Validator 实例的方法</strong></p><ol><li><p><strong>Validation.byDefaultProvider()</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">Configuration&lt;?&gt; config = Validation.byDefaultProvider().configure();<br>config.messageInterpolator(<span class="hljs-keyword">new</span> MyMessageInterpolator())<br>    .traversableResolver( <span class="hljs-keyword">new</span> MyTraversableResolver())<br>    .constraintValidatorFactory(<span class="hljs-keyword">new</span> MyConstraintValidatorFactory());<br><br>ValidatorFactory factory = config.buildValidatorFactory();<br>Validator validator = factory.getValidator();<br></code></pre></td></tr></table></figure></li><li><p><strong>Validation.byProvider( HibernateValidator.class )</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">HibernateValidatorConfiguration config = Validation.byProvider( HibernateValidator.class ).configure();<br>config.messageInterpolator(<span class="hljs-keyword">new</span> MyMessageInterpolator())<br>    .traversableResolver( <span class="hljs-keyword">new</span> MyTraversableResolver())<br>    .constraintValidatorFactory(<span class="hljs-keyword">new</span> MyConstraintValidatorFactory());<br><br>ValidatorFactory factory = config.buildValidatorFactory();<br>Validator validator = factory.getValidator();<br></code></pre></td></tr></table></figure></li></ol></blockquote><p>以上方法获取的 <code>Validator</code> 实例均是线程安全的</p><h3 id="42-validate-方法"><a class="markdownIt-Anchor" href="#42-validate-方法"></a> 4.2. validate 方法</h3><p><code>Validator</code> 中有三个方法能够被用来校验实体对象或其属性：</p><ul><li><code>validate()</code></li><li><code>validateProperty()</code></li><li><code>validateValue()</code></li></ul><p>三者均返回 <code>ConstraintViolation&lt;T&gt;</code> 的集合，用法相似 <code>validateProperty()</code>  和 <code>validateValue()</code> 会忽略被验证属性上定义的 <code>@Valid</code>。</p><h3 id="43-constraintviolation"><a class="markdownIt-Anchor" href="#43-constraintviolation"></a> 4.3. ConstraintViolation</h3><p>violation 译为“违规；违反”，<code>ConstraintViolation</code> 即校验失败信息，它有如下方法</p><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td><code>getMessage()</code></td><td>校验错误信息</td></tr><tr><td><code>getMessageTemplate()</code></td><td>校验错误信息模板（可自定义）</td></tr><tr><td><code>getRootBean()</code></td><td>被校验的根实体对象</td></tr><tr><td><code>getRootBeanClass()</code></td><td>被校验的根实体类</td></tr><tr><td><code>getLeafBean()</code></td><td>被校验 Bean 的实例对象</td></tr><tr><td><code>getPropertyPath()</code></td><td>从根对象到被校验属性的路径</td></tr><tr><td><code>getInvalidValue()</code></td><td>导致校验失败的值</td></tr><tr><td><code>getConstraintDescriptor()</code></td><td>导致校验失败的约束定义</td></tr></tbody></table><h3 id="44-executablevalidator"><a class="markdownIt-Anchor" href="#44-executablevalidator"></a> 4.4. ExecutableValidator</h3><p><code>Validator</code> 接口还有一个重要方法：</p><ul><li><code>forExecutables()</code></li></ul><p>返回方法或构造函数验证的 contract（译为“合同”）。无参，返回 <code>ExecutableValidator</code> 接口的实例，接口下有函数</p><ul><li><code>validateParameters()</code></li><li><code>validateReturnValue()</code></li><li><code>validateConstructorParameters()</code></li><li><code>validateConstructorReturnValue()</code></li></ul><p>方法构造参数相关的验证通常不会通过手动调用，一般在拦截器、AOP 或动态代理技术中使用。</p><p>以下是验证拦截器中对这些方法的使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Interceptor</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SampleMethodInterceptor</span> </span>&#123;<br>    <span class="hljs-meta">@Inject</span><br>    <span class="hljs-keyword">private</span> Validator validator;<br><br>    <span class="hljs-meta">@AroundInvoke</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">validateMethodInvocation</span><span class="hljs-params">(InvocationContext ctx)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">//validate parameters</span><br>        Set&lt;ConstraintViolation&lt;Object&gt;&gt; violations;<br>        violations = validator.forExecutables().validateParameters(<br>                ctx.getTarget(),<br>                ctx.getMethod(),<br>                ctx.getParameters()<br>        );<br><br>        <span class="hljs-comment">//if a violation occurs for parameters, raise an exception</span><br>        <span class="hljs-keyword">if</span> ( !violations.isEmpty() ) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ConstraintViolationException(<br>                    buildMessage( ctx.getMethod(), ctx.getParameters(), violations ),<br>                    violations<br>            );<br>        &#125;<br><br>        <span class="hljs-comment">//execute the method proper</span><br>        Object result = ctx.proceed();<br><br>        <span class="hljs-comment">//validate the return type</span><br>        violations = validator.forExecutables().validateReturnValue(<br>                ctx.getTarget(),<br>                ctx.getMethod(),<br>                result<br>        );<br><br>        <span class="hljs-comment">//if a violation occurs for the return type, raise an exception</span><br>        <span class="hljs-keyword">if</span> ( !violations.isEmpty() ) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ConstraintViolationException(<br>                    buildMessage( ctx.getMethod(), ctx.getParameters(), violations ),<br>                    violations<br>            );<br>        &#125;<br><br>        <span class="hljs-comment">//return the result</span><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-自定义约束"><a class="markdownIt-Anchor" href="#5-自定义约束"></a> 5. 自定义约束</h2><h3 id="51-约束注解"><a class="markdownIt-Anchor" href="#51-约束注解"></a> 5.1. 约束注解</h3><p>内置约束 <code>@NotNull</code> 源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(&#123; METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER, TYPE_USE &#125;)</span><br><span class="hljs-meta">@Retention(RUNTIME)</span><br><span class="hljs-meta">@Repeatable(List.class)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Constraint(validatedBy = &#123; &#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> NotNull &#123;<br><br><span class="hljs-function">String <span class="hljs-title">message</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> &quot;</span>&#123;javax.validation.constraints.NotNull.message&#125;<span class="hljs-string">&quot;;</span><br><span class="hljs-string">Class&lt;?&gt;[] groups() default &#123; &#125;;</span><br><span class="hljs-string">Class&lt;? extends Payload&gt;[] payload() default &#123; &#125;;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    @Target(&#123; METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER, TYPE_USE &#125;)</span><br><span class="hljs-string">@Retention(RUNTIME)</span><br><span class="hljs-string">@Documented</span><br><span class="hljs-string">@interface List &#123;</span><br><span class="hljs-string">NotNull[] value();</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><p>参考易知自定义约束关键在以下两点</p><ul><li>实现三个强制性要求的属性<ul><li>message——校验失败消息</li><li>groups——校验组</li><li>payload——设计用于指定约束条件严重级别，不被 API 自身所用，供应用使用</li></ul></li><li><code>@Constraint(validatedBy = XxxValidator.class)</code> 指明使用那个校验器（类）去校验使用了此标注的元素。</li></ul><p>以定义一个 <code>@CheckCase</code> 约束注解为例，它用于验证字符串的大小写情况：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 枚举类 CaseMode 表示大写模式或小写模式</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">CaseMode</span> </span>&#123;   UPPER,   LOWER; &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// import ...</span><br><span class="hljs-meta">@Target( &#123; METHOD, FIELD, ANNOTATION_TYPE &#125;)</span><br><span class="hljs-meta">@Retention(RUNTIME)</span><br><span class="hljs-meta">@Constraint(validatedBy = CheckCaseValidator.class)</span> <span class="hljs-comment">// 指定约束校验器</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> CheckCase &#123;<br>    <span class="hljs-function">String <span class="hljs-title">message</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> &quot;</span>&#123;com.mycompany.constraints.checkcase&#125;<span class="hljs-string">&quot;;</span><br><span class="hljs-string">    Class&lt;?&gt;[] groups() default &#123;&#125;;</span><br><span class="hljs-string">    Class&lt;? extends Payload&gt;[] payload() default &#123;&#125;;</span><br><span class="hljs-string">    CaseMode value();</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="52-约束校验器-constraintvalidator"><a class="markdownIt-Anchor" href="#52-约束校验器-constraintvalidator"></a> 5.2. 约束校验器 ConstraintValidator</h3><p>下一步是实现 <code>ConstraintValidator</code> 接口。在类上定义约束时，正在验证的类实例将传递给 <code>ConstraintValidator</code>。在字段上定义约束时，该字段的值将传递给 <code>ConstraintValidator</code> 。当在 getter() 上定义约束时，getter() 调用的结果将传递给 <code>ConstraintValidator</code>。</p><p>须指定两个泛型参数——第一个是校验器所服务到标注类型（即自定义约束注解类），第二个为需要校验的数据类型（本例中是 <code>@CheckCase</code> 和 <code>String</code>）</p><p>并重写 <code>initialize()</code> 方法和 <code>isValid()</code> 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.validation.ConstraintValidator;<br><span class="hljs-keyword">import</span> javax.validation.ConstraintValidatorContext;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CheckCaseValidator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ConstraintValidator</span>&lt;<span class="hljs-title">CheckCase</span>, <span class="hljs-title">String</span>&gt; </span>&#123;<br>    <span class="hljs-keyword">private</span> CaseMode caseMode;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initialize</span><span class="hljs-params">(CheckCase constraintAnnotation)</span> </span>&#123; <span class="hljs-keyword">this</span>.caseMode = constraintAnnotation.value(); &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isValid</span><span class="hljs-params">(String object, ConstraintValidatorContext constraintContext)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (object == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">if</span> (caseMode == CaseMode.UPPER) <span class="hljs-keyword">return</span> object.equals(object.toUpperCase());<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> object.equals(object.toLowerCase());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="53-约束校验器上下文-constraintvalidatorcontext"><a class="markdownIt-Anchor" href="#53-约束校验器上下文-constraintvalidatorcontext"></a> 5.3. 约束校验器上下文 ConstraintValidatorContext</h3><p>通过使用传入的 <code>ConstraintValidatorContext</code> 对象, 我们还可以给约束条件中定义的错误信息模板来添加额外的信息或者完全创建一个新的错误信息模板。如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isValid</span><span class="hljs-params">(String object, ConstraintValidatorContext constraintContext)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (object == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    <span class="hljs-keyword">boolean</span> isValid;<br>    <span class="hljs-keyword">if</span> (caseMode == CaseMode.UPPER) isValid = object.equals(object.toUpperCase());<br>    <span class="hljs-keyword">else</span> isValid = object.equals(object.toLowerCase());<br>    <span class="hljs-keyword">if</span>(!isValid) &#123;<br>    constraintContext.disableDefaultConstraintViolation();<br>    constraintContext<br>            .buildConstraintViolationWithTemplate(<span class="hljs-string">&quot;&#123;com.mycompany.constraints.CheckCase.message&#125;&quot;</span>)<br>            .addConstraintViolation();<br>    &#125;<br>    <span class="hljs-keyword">return</span> isValid;<br>&#125;<br></code></pre></td></tr></table></figure><p>在本例中, 实际上通过调用 <code>ConstraintValidatorContext</code> 达到了一个使用默认消息模板的效果。</p><h3 id="54-使用演示"><a class="markdownIt-Anchor" href="#54-使用演示"></a> 5.4. 使用演示</h3><p><strong>model</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">xxxEntity</span> </span>&#123;<br>    <span class="hljs-meta">@NotNull</span><br>    <span class="hljs-meta">@Size(min = 2, max = 14)</span><br>    <span class="hljs-meta">@CheckCase(CaseMode.UPPER)</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-comment">// constructor, setter and getter</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>properties</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">com.mycompany.constraints.CheckCase.message</span>=<span class="hljs-string">Case mode must be &#123;value&#125;.</span><br></code></pre></td></tr></table></figure><p><strong>junit test</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">XxxTest</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Validator validator;<br>    <span class="hljs-meta">@BeforeClass</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUp</span><span class="hljs-params">()</span> </span>&#123;<br>        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();<br>        validator = factory.getValidator();<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testNameNotUpperCase</span><span class="hljs-params">()</span> </span>&#123;<br>        XxxEntity entity = <span class="hljs-keyword">new</span> XxxEntity(<span class="hljs-string">&quot;aaabbbccc&quot;</span>);<br>        Set&lt;ConstraintViolation&lt;XxxEntity&gt;&gt; constraintViolations = validator.validate(entity);<br>        assertEquals(<span class="hljs-number">1</span>, constraintViolations.size());<br>        assertEquals(<span class="hljs-string">&quot;Case mode must be UPPER.&quot;</span>, constraintViolations.iterator().next().getMessage());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>例中同一属性上的多个注解也可以定义成组合注解。</p><h2 id="6-统一异常处理"><a class="markdownIt-Anchor" href="#6-统一异常处理"></a> 6. 统一异常处理</h2><h3 id="61-restcontrolleradvice-和-exceptionhandler"><a class="markdownIt-Anchor" href="#61-restcontrolleradvice-和-exceptionhandler"></a> 6.1. RestControllerAdvice 和 ExceptionHandler</h3><p>前文只是梳理了 Bean Validation 规范的基础概念和其实现 Hibernate Validator 的基本使用。实现自定义参数校验后，Web 应用还需要对参数校验结果做统一异常处理，处理成统一的格式（例中是 <code>BaseResponse</code>）抛出到前端。</p><p>Spring Web Restful 应用中，这个捕获异常并统一处理的机制是 <code>RestControllerAdvice</code> + <code>ExceptionHandler</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GlobalExceptionTranslator</span> </span>&#123;<br>    ...<br><br>    <span class="hljs-meta">@ExceptionHandler(ConstraintViolationException .class)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> BaseResponse <span class="hljs-title">handleError</span><span class="hljs-params">(ConstraintViolationException e)</span> </span>&#123;...&#125;<br><br>    <span class="hljs-meta">@ExceptionHandler(MethodArgumentNotValidException.class)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> BaseResponse <span class="hljs-title">handleError</span><span class="hljs-params">(MethodArgumentNotValidException e)</span> </span>&#123;...&#125;<br><br>    <span class="hljs-meta">@ExceptionHandler(Throwable.class)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> BaseResponse <span class="hljs-title">handleError</span><span class="hljs-params">(Throwable e)</span> </span>&#123;...&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><a href="https://blog.csdn.net/weixin_36142042/article/details/104850543">@RestControllerAdvice 全局异常处理起作用的原理</a></p></blockquote><p>Spring Mvc 应用中统一异常处理方式由于需返回 HTML 页面，实现方式则是，实现 <code>ErrorController</code> 接口，定制不同页面。</p><h3 id="62-spring-security-统一异常处理"><a class="markdownIt-Anchor" href="#62-spring-security-统一异常处理"></a> 6.2. spring security 统一异常处理</h3><p>[待填](</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>堆建立的两种方法——“上浮”和“下沉”</title>
    <link href="/2022/01/10/%E5%A0%86%E5%BB%BA%E7%AB%8B%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95%E2%80%94%E2%80%94%E2%80%9C%E4%B8%8A%E6%B5%AE%E2%80%9D%E5%92%8C%E2%80%9C%E4%B8%8B%E6%B2%89%E2%80%9D/"/>
    <url>/2022/01/10/%E5%A0%86%E5%BB%BA%E7%AB%8B%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95%E2%80%94%E2%80%94%E2%80%9C%E4%B8%8A%E6%B5%AE%E2%80%9D%E5%92%8C%E2%80%9C%E4%B8%8B%E6%B2%89%E2%80%9D/</url>
    
    <content type="html"><![CDATA[<h3 id="堆结构"><a class="markdownIt-Anchor" href="#堆结构"></a> 堆结构</h3><p>堆通常是一个可以被看做一棵完全二叉树的数组对象。核心也是唯一特征是堆中某个节点的值总是不大于或不小于其父节点的值。</p><p><img src="https://s2.loli.net/2022/01/09/JlEo2LXAwrDtTSR.png" alt="image-20190914152039272.png" /></p><h3 id="建堆算法"><a class="markdownIt-Anchor" href="#建堆算法"></a> 建堆算法</h3><p>以大顶堆为例讨论两种常用的堆建立的方法</p><h4 id="1-上浮"><a class="markdownIt-Anchor" href="#1-上浮"></a> 1. “上浮”</h4><p>一个常见场景是要在无序而数据量未知的输入流中动态地建立堆。这种场景下建堆实现较简单，即依次将新结点插入到堆中。</p><h5 id="算法思路和实现"><a class="markdownIt-Anchor" href="#算法思路和实现"></a> 算法思路和实现</h5><p>对每个新结点同父节点比较，大于父结点就与之交换，然后递归这个过程直到根节点，类似一个“上浮”的过程。</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildMaxHeap</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] heap)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; heap.length; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i; j &gt; <span class="hljs-number">0</span>; j = (j - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">int</span> parent = heap[(j - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>];<br>            <span class="hljs-keyword">if</span> (parent &lt; heap[j]) &#123;<br>                heap[(j - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>] = heap[j];<br>                heap[j] = parent;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="性能"><a class="markdownIt-Anchor" href="#性能"></a> 性能</h5><p>算法的时间复杂度分析也较为容易，设输入数组长为 N，堆的深度为 log<sub>2</sub>N（设为 k），考虑最坏情况：要用 <code>[0, 1, 2, 3, 4, 5...]</code> 建立大顶堆</p><ol><li>第 1 层 1 个结点（0）比较 0 次交换 0 次</li><li>第 2 层 2 个结点（1，2）各比较 1 次交换 1 次</li><li>第 3 层 4 个结点（3，4，5，6）各比较 2 次交换 2 次</li><li>第 i 层 2<sup>i-1</sup> 个结点各比较 i 次交换 i 次</li><li>…</li></ol><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mi>k</mi></munderover><msup><mn>2</mn><mi>i</mi></msup><mo>∗</mo><mi>i</mi></mrow><annotation encoding="application/x-tex">S = \sum_{i=0}^{k} 2^i*i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.1137820000000005em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8361130000000003em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8746639999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mo>=</mo><mn>2</mn><mi>S</mi><mo>−</mo><mi>S</mi><mspace linebreak="newline"></mspace><mo>=</mo><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mi>k</mi></munderover><msup><mn>2</mn><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msup><mo>∗</mo><mi>i</mi></mrow><mo>−</mo><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mi>k</mi></munderover><msup><mn>2</mn><mi>i</mi></msup><mo>∗</mo><mi>i</mi></mrow><mspace linebreak="newline"></mspace><mo>=</mo><mo stretchy="false">(</mo><mi>k</mi><mo>−</mo><mn>2</mn><mo stretchy="false">)</mo><msup><mn>2</mn><mi>k</mi></msup><mo>−</mo><mn>4</mn></mrow><annotation encoding="application/x-tex">S=2S-S\\={\sum_{i=0}^{k} 2^{i+1}*i}-{\sum_{i=0}^{k}2^i*i}\\=(k-2)2^k-4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.1137820000000005em;vertical-align:-1.277669em;"></span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8361130000000003em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.874664em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">i</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:3.1137820000000005em;vertical-align:-1.277669em;"></span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8361130000000003em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8746639999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">i</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.149108em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span></span></span></span></span></p><p>即时间复杂度为 O(nlogn)</p><h4 id="2-下沉"><a class="markdownIt-Anchor" href="#2-下沉"></a> 2. “下沉”</h4><p>适用场景是将给定的数组调整为堆，性能更好，也是堆排序的常用建堆方式。</p><h5 id="算法思路和实现-2"><a class="markdownIt-Anchor" href="#算法思路和实现-2"></a> 算法思路和实现</h5><p>相对前者，它是一种自底向上建堆的方法，即从后向前遍历，判断当前结点与其两个孩子结点的大小关系，小于孩子结点则交换，类似一个“下沉”的过程。</p><p><code>arr.length/2 - 1</code> 是最后一个非叶结点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildMaxHeap</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = arr.length / <span class="hljs-number">2</span> - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>        heapAdjust(arr, i, arr.length);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">heapAdjust</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] heap, <span class="hljs-keyword">int</span> start, <span class="hljs-keyword">int</span> end)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> rc = heap[start]; <span class="hljs-comment">// 记录该要调整的结点</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span> * start + <span class="hljs-number">1</span>; i &lt; end; i = i * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">if</span> (i + <span class="hljs-number">1</span> &lt; end &amp;&amp; heap[i] &lt; heap[i + <span class="hljs-number">1</span>]) i++; <span class="hljs-comment">// 取左右孩子中较大结点</span><br>        <span class="hljs-keyword">if</span> (rc &lt; heap[i]) &#123;<br>            heap[start] = heap[i]; <span class="hljs-comment">// 更新当前要调整的结点值的</span><br>            start = i; <span class="hljs-comment">// 下沉</span><br>        &#125;<br>    &#125;<br>    heap[start] = rc; <span class="hljs-comment">// 插入根节点（归位）</span><br>&#125;<br></code></pre></td></tr></table></figure><p>递归写法易读性更好</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">heapAdjust</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] heap, <span class="hljs-keyword">int</span> start, <span class="hljs-keyword">int</span> end)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (start &gt;= end) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">int</span> rc = heap[start];<br>    <span class="hljs-comment">// 取左右孩子结点点中较大者下标为 i</span><br>    <span class="hljs-keyword">int</span> i = start * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (i + <span class="hljs-number">1</span> &lt; end &amp;&amp; heap[i] &lt; heap[i + <span class="hljs-number">1</span>]) i++;<br>    <span class="hljs-keyword">if</span> (i &lt; end &amp;&amp; rc &lt; heap[i]) &#123;<br>        heap[start] = heap[i];<br>        heap[i] = rc;<br>        heapAdjust2(heap, i, end);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>算法参考了严蔚敏奶奶《数据结构》教材的实现，交换这一过程处理相对巧妙</p><h5 id="性能分析"><a class="markdownIt-Anchor" href="#性能分析"></a> 性能分析</h5><p>设输入数组长为 N，堆的深度为 log<sub>2</sub>N（设为 k），考虑最坏情况：要用 <code>[0, 1, 2, 3, 4, 5...]</code> 建立大顶堆</p><ol><li>第 k 层 2<sup>k-1</sup> 个结点均为叶子结点不需要考虑</li><li>第 k-1 层 2<sup>k-2</sup> 个结点各比较 1 次交换 1 次</li><li>…</li><li>第 3 层 4 个结点（3，4，5，6）各比较 k-3 次交换 k-3 次</li><li>第 2 层 2 个结点（1，2）各比较 k-2 次交换 k-2 次</li><li>第 1 层根节点（1）比较 k-1 次，交换 k-1 次</li></ol><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></munderover><msup><mn>2</mn><mrow><mi>k</mi><mo>−</mo><mi>i</mi></mrow></msup><mo stretchy="false">(</mo><mi>k</mi><mo>−</mo><mi>i</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">S = \sum_{i=1}^{k-1} 2^{k-i}(k-i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.1137820000000005em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8361130000000003em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">i</span><span class="mclose">)</span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mo>=</mo><mn>2</mn><mi>S</mi><mo>−</mo><mi>S</mi><mspace linebreak="newline"></mspace><mo>=</mo><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></munderover><msup><mn>2</mn><mrow><mi>k</mi><mo>−</mo><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msup><mo stretchy="false">(</mo><mi>k</mi><mo>−</mo><mi>i</mi><mo stretchy="false">)</mo></mrow><mo>−</mo><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></munderover><msup><mn>2</mn><mrow><mi>k</mi><mo>−</mo><mi>i</mi></mrow></msup><mo stretchy="false">(</mo><mi>k</mi><mo>−</mo><mi>i</mi><mo stretchy="false">)</mo></mrow><mspace linebreak="newline"></mspace><mo>=</mo><msup><mn>2</mn><mi>k</mi></msup><mo>−</mo><mi>k</mi><mspace linebreak="newline"></mspace><mo>=</mo><mi>N</mi><mo>−</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>N</mi></mrow><annotation encoding="application/x-tex">S=2S-S\\={\sum_{i=1}^{k-1}2^{k-i+1}(k-i)}-{\sum_{i=1}^{k-1}2^{k-i}(k-i)}\\=2^k-k\\=N - \log_{2}{N}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.1137820000000005em;vertical-align:-1.277669em;"></span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8361130000000003em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">i</span><span class="mclose">)</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:3.1137820000000005em;vertical-align:-1.277669em;"></span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8361130000000003em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">i</span><span class="mclose">)</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9824379999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.93858em;vertical-align:-0.24414em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span></span></span></p><ul><li>S = k-1 + 2(k-2) + 2<sup>2</sup>(k-3) + 2<sup>3</sup>(k-4) + … + 2<sup>k-3</sup> * 2 + 2<sup>k-2</sup></li><li>2S =        2(k-1) + 2<sup>2</sup>(k-2) + 2<sup>3</sup>(k-3) + … + 2<sup>k-3</sup> * 3 + 2 <sup>k-2</sup> *2 + 2<sup>k-1</sup></li></ul><p>即时间复杂度为 O(n)</p>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/01/09/hello-world/"/>
    <url>/2022/01/09/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
